// Code generated by github.com/Karitham/handlergen. DO NOT EDIT.
package {{ .PkgName }}

import (
	{{range .Imports}}"{{.Path}}"	
{{end}})

type {{ SnakeToCamel .PkgName }} interface {
	{{ range .Functions }}
	{{ .Name }}(http.ResponseWriter, *http.Request {{if .HasQueryParams }}
	{{- range .QueryParams -}}, {{ StripTypeSuffix .Type }}
	{{- end -}}
	{{- end -}}
	{{- if .HasBody -}}, {{ .Body.Type }}
	{{- end -}})
	{{- end -}}
}

{{ range .Functions }}
func {{ SnakeToCamel .Name }}(h {{ SnakeToCamel $.PkgName }}) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		{{ if .HasQueryParams -}} query := r.URL.Query()
		{{ range .QueryParams -}}
			{{ if eq .Type "int"}}{{ template "int" . }}
			{{ else if eq .Type "int_query"}}{{ template "int_query" . }}
			{{ else if eq .Type "int_header"}}{{ template "int_header" . }}
			{{ else if eq .Type "uint" }}{{ template "uint" . }}
			{{ else if eq .Type "string" }}{{ template "string" . }}
			{{ else if eq .Type "string_query" }}{{ template "string_query" . }}
			{{ else if eq .Type "string_header" }}{{ template "string_header" . }}
			{{ else if eq .Type "[]string" }}{{ template "[]string" . }}
			{{ else if eq .Type "[]string_query" }}{{ template "[]string" . }}
			{{ else if eq .Type "[]string_header" }}{{ template "[]string_header" . }}
		{{- end -}}
		{{- end }}
		{{ end }}
		{{ if .HasBody }}var body {{ .Body.Type }}
		if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
			http.Error(w, "invalid body", 400)
			return
		}
		{{ end }}
		h.{{ .Name }}(
			w,
			r,
			{{ if .HasQueryParams }}{{ range .QueryParams }}{{ SnakeToCamel .Name }},
			{{ end }}{{ end }}{{ if .HasBody }}body,
	{{ end -}}
		)
	}
}
{{- end -}}