{{- define "uint" -}}
		query{{ SnakeToCamel .Name }} := query.Get("{{ .Name }}")
		{{ SnakeToCamel .Name }}64, err := strconv.ParseUint(query{{ SnakeToCamel .Name }}, 10, 64)
		if err != nil {
			http.Error(w, "invalid query", 400)
			return
		}
		{{ SnakeToCamel .Name }} := uint({{ SnakeToCamel .Name }}64)
{{- end -}}

{{- define "int" -}}
		query{{ SnakeToCamel .Name }} := query.Get("{{ .Name }}")
		{{ SnakeToCamel .Name }}, err := strconv.Atoi(query{{ SnakeToCamel .Name }})
		if err != nil {
			http.Error(w, "invalid query", 400)
			return
		}
{{- end -}}

{{- define "int_query" -}}
		query{{ SnakeToCamel .Name }} := chi.URLParam(r, "{{ .Name }}")
		{{ SnakeToCamel .Name }}, err := strconv.Atoi(query{{ SnakeToCamel .Name }})
		if err != nil {
			http.Error(w, "invalid query", 400)
			return
		}
{{- end -}}

{{- define "int_header" -}}
		query{{ SnakeToCamel .Name }} := r.Header.Get("{{ .Name }}")
		{{ SnakeToCamel .Name }}, err := strconv.Atoi(query{{ SnakeToCamel .Name }})
		if err != nil {
			http.Error(w, "invalid query", 400)
			return
		}
{{- end -}}

{{- define "string" -}}
		{{ SnakeToCamel .Name }} := query.Get("{{ .Name }}")
{{- end -}}

{{- define "string_query" -}}
		{{ SnakeToCamel .Name }} := chi.URLParam(r, "{{ .Name }}")
{{- end -}}

{{- define "string_header" -}}
		{{ SnakeToCamel .Name }} := r.Header.Get("{{ .Name }}")
{{- end -}}

{{- define "[]string" -}}
		query{{ SnakeToCamel .Name }} := query.Get("{{ .Name }}")
		{{ SnakeToCamel .Name }} := strings.Split(query{{ SnakeToCamel .Name }}, ",")
{{- end -}}

{{- define "[]string_query" -}}
		query{{ SnakeToCamel .Name }} := chi.URLParam(r, "{{ .Name }}")
		{{ SnakeToCamel .Name }} := strings.Split(query{{ SnakeToCamel .Name }}, ",")
{{- end -}}

{{- define "[]string_header" -}}
		query{{ SnakeToCamel .Name }} := query.Get("{{ .Name }}")
		{{ SnakeToCamel .Name }} := strings.Split(query{{ SnakeToCamel .Name }}, ",")
{{- end -}}

