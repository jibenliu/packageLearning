package demo

///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

import (
	"fmt"

	"github.com/MohamedBassem/gormgen"
	"github.com/jinzhu/gorm"
)

func (t *User) Save(db *gorm.DB) error {
	return db.Save(t).Error
}

func (t *User) Delete(db *gorm.DB) error {
	return db.Delete(t).Error
}

type UserQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *UserQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *UserQueryBuilder) Count(db *gorm.DB) (int, error) {
	var c int
	res := qb.buildQuery(db).Model(&User{}).Count(&c)
	if res.RecordNotFound() {
		c = 0
	}
	return c, res.Error
}

func (qb *UserQueryBuilder) First(db *gorm.DB) (*User, error) {
	ret := &User{}
	res := qb.buildQuery(db).First(ret)
	if res.RecordNotFound() {
		ret = nil
	}
	return ret, res.Error
}

func (qb *UserQueryBuilder) QueryOne(db *gorm.DB) (*User, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return &ret[0], err
	}
	return nil, err
}

func (qb *UserQueryBuilder) QueryAll(db *gorm.DB) ([]User, error) {
	ret := []User{}
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *UserQueryBuilder) Limit(limit int) *UserQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *UserQueryBuilder) Offset(offset int) *UserQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *UserQueryBuilder) WhereId(p gormgen.Predicate, value uint) *UserQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *UserQueryBuilder) OrderById(asc bool) *UserQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *UserQueryBuilder) WhereUserName(p gormgen.Predicate, value string) *UserQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "user_name", p),
		value,
	})
	return qb
}

func (qb *UserQueryBuilder) OrderByUserName(asc bool) *UserQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "user_name "+order)
	return qb
}

func (qb *UserQueryBuilder) WhereNickName(p gormgen.Predicate, value string) *UserQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "nick_name", p),
		value,
	})
	return qb
}

func (qb *UserQueryBuilder) OrderByNickName(asc bool) *UserQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "nick_name "+order)
	return qb
}

func (qb *UserQueryBuilder) WhereMobile(p gormgen.Predicate, value string) *UserQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "mobile", p),
		value,
	})
	return qb
}

func (qb *UserQueryBuilder) OrderByMobile(asc bool) *UserQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "mobile "+order)
	return qb
}

func (qb *UserQueryBuilder) WhereIsDeleted(p gormgen.Predicate, value int8) *UserQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", p),
		value,
	})
	return qb
}

func (qb *UserQueryBuilder) OrderByIsDeleted(asc bool) *UserQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "is_deleted "+order)
	return qb
}

func (qb *UserQueryBuilder) WhereCreatedAt(p gormgen.Predicate, value int64) *UserQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", p),
		value,
	})
	return qb
}

func (qb *UserQueryBuilder) OrderByCreatedAt(asc bool) *UserQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_at "+order)
	return qb
}

func (qb *UserQueryBuilder) WhereUpdatedAt(p gormgen.Predicate, value int64) *UserQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", p),
		value,
	})
	return qb
}

func (qb *UserQueryBuilder) OrderByUpdatedAt(asc bool) *UserQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "updated_at "+order)
	return qb
}
