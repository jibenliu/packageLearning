// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm-gen-demo/model"
)

func newAlertAggrView(db *gorm.DB, opts ...gen.DOOption) alertAggrView {
	_alertAggrView := alertAggrView{}

	_alertAggrView.alertAggrViewDo.UseDB(db, opts...)
	_alertAggrView.alertAggrViewDo.UseModel(&model.AlertAggrView{})

	tableName := _alertAggrView.alertAggrViewDo.TableName()
	_alertAggrView.ALL = field.NewAsterisk(tableName)
	_alertAggrView.ID = field.NewInt64(tableName, "id")
	_alertAggrView.Name = field.NewString(tableName, "name")
	_alertAggrView.Rule = field.NewString(tableName, "rule")
	_alertAggrView.Cate = field.NewInt64(tableName, "cate")
	_alertAggrView.CreateAt = field.NewInt64(tableName, "create_at")
	_alertAggrView.CreateBy = field.NewInt64(tableName, "create_by")
	_alertAggrView.UpdateAt = field.NewInt64(tableName, "update_at")

	_alertAggrView.fillFieldMap()

	return _alertAggrView
}

type alertAggrView struct {
	alertAggrViewDo

	ALL      field.Asterisk
	ID       field.Int64
	Name     field.String
	Rule     field.String
	Cate     field.Int64 // 0: preset 1: custom
	CreateAt field.Int64
	CreateBy field.Int64 // user id
	UpdateAt field.Int64

	fieldMap map[string]field.Expr
}

func (a alertAggrView) Table(newTableName string) *alertAggrView {
	a.alertAggrViewDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a alertAggrView) As(alias string) *alertAggrView {
	a.alertAggrViewDo.DO = *(a.alertAggrViewDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *alertAggrView) updateTableName(table string) *alertAggrView {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Name = field.NewString(table, "name")
	a.Rule = field.NewString(table, "rule")
	a.Cate = field.NewInt64(table, "cate")
	a.CreateAt = field.NewInt64(table, "create_at")
	a.CreateBy = field.NewInt64(table, "create_by")
	a.UpdateAt = field.NewInt64(table, "update_at")

	a.fillFieldMap()

	return a
}

func (a *alertAggrView) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *alertAggrView) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
	a.fieldMap["rule"] = a.Rule
	a.fieldMap["cate"] = a.Cate
	a.fieldMap["create_at"] = a.CreateAt
	a.fieldMap["create_by"] = a.CreateBy
	a.fieldMap["update_at"] = a.UpdateAt
}

func (a alertAggrView) clone(db *gorm.DB) alertAggrView {
	a.alertAggrViewDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a alertAggrView) replaceDB(db *gorm.DB) alertAggrView {
	a.alertAggrViewDo.ReplaceDB(db)
	return a
}

type alertAggrViewDo struct{ gen.DO }

type IAlertAggrViewDo interface {
	gen.SubQuery
	Debug() IAlertAggrViewDo
	WithContext(ctx context.Context) IAlertAggrViewDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAlertAggrViewDo
	WriteDB() IAlertAggrViewDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAlertAggrViewDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAlertAggrViewDo
	Not(conds ...gen.Condition) IAlertAggrViewDo
	Or(conds ...gen.Condition) IAlertAggrViewDo
	Select(conds ...field.Expr) IAlertAggrViewDo
	Where(conds ...gen.Condition) IAlertAggrViewDo
	Order(conds ...field.Expr) IAlertAggrViewDo
	Distinct(cols ...field.Expr) IAlertAggrViewDo
	Omit(cols ...field.Expr) IAlertAggrViewDo
	Join(table schema.Tabler, on ...field.Expr) IAlertAggrViewDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAlertAggrViewDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAlertAggrViewDo
	Group(cols ...field.Expr) IAlertAggrViewDo
	Having(conds ...gen.Condition) IAlertAggrViewDo
	Limit(limit int) IAlertAggrViewDo
	Offset(offset int) IAlertAggrViewDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAlertAggrViewDo
	Unscoped() IAlertAggrViewDo
	Create(values ...*model.AlertAggrView) error
	CreateInBatches(values []*model.AlertAggrView, batchSize int) error
	Save(values ...*model.AlertAggrView) error
	First() (*model.AlertAggrView, error)
	Take() (*model.AlertAggrView, error)
	Last() (*model.AlertAggrView, error)
	Find() ([]*model.AlertAggrView, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AlertAggrView, err error)
	FindInBatches(result *[]*model.AlertAggrView, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AlertAggrView) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAlertAggrViewDo
	Assign(attrs ...field.AssignExpr) IAlertAggrViewDo
	Joins(fields ...field.RelationField) IAlertAggrViewDo
	Preload(fields ...field.RelationField) IAlertAggrViewDo
	FirstOrInit() (*model.AlertAggrView, error)
	FirstOrCreate() (*model.AlertAggrView, error)
	FindByPage(offset int, limit int) (result []*model.AlertAggrView, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAlertAggrViewDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a alertAggrViewDo) Debug() IAlertAggrViewDo {
	return a.withDO(a.DO.Debug())
}

func (a alertAggrViewDo) WithContext(ctx context.Context) IAlertAggrViewDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a alertAggrViewDo) ReadDB() IAlertAggrViewDo {
	return a.Clauses(dbresolver.Read)
}

func (a alertAggrViewDo) WriteDB() IAlertAggrViewDo {
	return a.Clauses(dbresolver.Write)
}

func (a alertAggrViewDo) Session(config *gorm.Session) IAlertAggrViewDo {
	return a.withDO(a.DO.Session(config))
}

func (a alertAggrViewDo) Clauses(conds ...clause.Expression) IAlertAggrViewDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a alertAggrViewDo) Returning(value interface{}, columns ...string) IAlertAggrViewDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a alertAggrViewDo) Not(conds ...gen.Condition) IAlertAggrViewDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a alertAggrViewDo) Or(conds ...gen.Condition) IAlertAggrViewDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a alertAggrViewDo) Select(conds ...field.Expr) IAlertAggrViewDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a alertAggrViewDo) Where(conds ...gen.Condition) IAlertAggrViewDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a alertAggrViewDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAlertAggrViewDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a alertAggrViewDo) Order(conds ...field.Expr) IAlertAggrViewDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a alertAggrViewDo) Distinct(cols ...field.Expr) IAlertAggrViewDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a alertAggrViewDo) Omit(cols ...field.Expr) IAlertAggrViewDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a alertAggrViewDo) Join(table schema.Tabler, on ...field.Expr) IAlertAggrViewDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a alertAggrViewDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAlertAggrViewDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a alertAggrViewDo) RightJoin(table schema.Tabler, on ...field.Expr) IAlertAggrViewDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a alertAggrViewDo) Group(cols ...field.Expr) IAlertAggrViewDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a alertAggrViewDo) Having(conds ...gen.Condition) IAlertAggrViewDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a alertAggrViewDo) Limit(limit int) IAlertAggrViewDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a alertAggrViewDo) Offset(offset int) IAlertAggrViewDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a alertAggrViewDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAlertAggrViewDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a alertAggrViewDo) Unscoped() IAlertAggrViewDo {
	return a.withDO(a.DO.Unscoped())
}

func (a alertAggrViewDo) Create(values ...*model.AlertAggrView) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a alertAggrViewDo) CreateInBatches(values []*model.AlertAggrView, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a alertAggrViewDo) Save(values ...*model.AlertAggrView) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a alertAggrViewDo) First() (*model.AlertAggrView, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlertAggrView), nil
	}
}

func (a alertAggrViewDo) Take() (*model.AlertAggrView, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlertAggrView), nil
	}
}

func (a alertAggrViewDo) Last() (*model.AlertAggrView, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlertAggrView), nil
	}
}

func (a alertAggrViewDo) Find() ([]*model.AlertAggrView, error) {
	result, err := a.DO.Find()
	return result.([]*model.AlertAggrView), err
}

func (a alertAggrViewDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AlertAggrView, err error) {
	buf := make([]*model.AlertAggrView, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a alertAggrViewDo) FindInBatches(result *[]*model.AlertAggrView, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a alertAggrViewDo) Attrs(attrs ...field.AssignExpr) IAlertAggrViewDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a alertAggrViewDo) Assign(attrs ...field.AssignExpr) IAlertAggrViewDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a alertAggrViewDo) Joins(fields ...field.RelationField) IAlertAggrViewDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a alertAggrViewDo) Preload(fields ...field.RelationField) IAlertAggrViewDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a alertAggrViewDo) FirstOrInit() (*model.AlertAggrView, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlertAggrView), nil
	}
}

func (a alertAggrViewDo) FirstOrCreate() (*model.AlertAggrView, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlertAggrView), nil
	}
}

func (a alertAggrViewDo) FindByPage(offset int, limit int) (result []*model.AlertAggrView, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a alertAggrViewDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a alertAggrViewDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a alertAggrViewDo) Delete(models ...*model.AlertAggrView) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *alertAggrViewDo) withDO(do gen.Dao) *alertAggrViewDo {
	a.DO = *do.(*gen.DO)
	return a
}
