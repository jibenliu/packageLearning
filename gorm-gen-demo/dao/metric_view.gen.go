// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm-gen-demo/model"
)

func newMetricView(db *gorm.DB, opts ...gen.DOOption) metricView {
	_metricView := metricView{}

	_metricView.metricViewDo.UseDB(db, opts...)
	_metricView.metricViewDo.UseModel(&model.MetricView{})

	tableName := _metricView.metricViewDo.TableName()
	_metricView.ALL = field.NewAsterisk(tableName)
	_metricView.ID = field.NewInt64(tableName, "id")
	_metricView.Name = field.NewString(tableName, "name")
	_metricView.Cate = field.NewInt64(tableName, "cate")
	_metricView.Configs = field.NewString(tableName, "configs")
	_metricView.CreateAt = field.NewInt64(tableName, "create_at")
	_metricView.CreateBy = field.NewInt64(tableName, "create_by")
	_metricView.UpdateAt = field.NewInt64(tableName, "update_at")

	_metricView.fillFieldMap()

	return _metricView
}

type metricView struct {
	metricViewDo

	ALL      field.Asterisk
	ID       field.Int64
	Name     field.String
	Cate     field.Int64 // 0: preset 1: custom
	Configs  field.String
	CreateAt field.Int64
	CreateBy field.Int64 // user id
	UpdateAt field.Int64

	fieldMap map[string]field.Expr
}

func (m metricView) Table(newTableName string) *metricView {
	m.metricViewDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m metricView) As(alias string) *metricView {
	m.metricViewDo.DO = *(m.metricViewDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *metricView) updateTableName(table string) *metricView {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.Name = field.NewString(table, "name")
	m.Cate = field.NewInt64(table, "cate")
	m.Configs = field.NewString(table, "configs")
	m.CreateAt = field.NewInt64(table, "create_at")
	m.CreateBy = field.NewInt64(table, "create_by")
	m.UpdateAt = field.NewInt64(table, "update_at")

	m.fillFieldMap()

	return m
}

func (m *metricView) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *metricView) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 7)
	m.fieldMap["id"] = m.ID
	m.fieldMap["name"] = m.Name
	m.fieldMap["cate"] = m.Cate
	m.fieldMap["configs"] = m.Configs
	m.fieldMap["create_at"] = m.CreateAt
	m.fieldMap["create_by"] = m.CreateBy
	m.fieldMap["update_at"] = m.UpdateAt
}

func (m metricView) clone(db *gorm.DB) metricView {
	m.metricViewDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m metricView) replaceDB(db *gorm.DB) metricView {
	m.metricViewDo.ReplaceDB(db)
	return m
}

type metricViewDo struct{ gen.DO }

type IMetricViewDo interface {
	gen.SubQuery
	Debug() IMetricViewDo
	WithContext(ctx context.Context) IMetricViewDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMetricViewDo
	WriteDB() IMetricViewDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMetricViewDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMetricViewDo
	Not(conds ...gen.Condition) IMetricViewDo
	Or(conds ...gen.Condition) IMetricViewDo
	Select(conds ...field.Expr) IMetricViewDo
	Where(conds ...gen.Condition) IMetricViewDo
	Order(conds ...field.Expr) IMetricViewDo
	Distinct(cols ...field.Expr) IMetricViewDo
	Omit(cols ...field.Expr) IMetricViewDo
	Join(table schema.Tabler, on ...field.Expr) IMetricViewDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMetricViewDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMetricViewDo
	Group(cols ...field.Expr) IMetricViewDo
	Having(conds ...gen.Condition) IMetricViewDo
	Limit(limit int) IMetricViewDo
	Offset(offset int) IMetricViewDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMetricViewDo
	Unscoped() IMetricViewDo
	Create(values ...*model.MetricView) error
	CreateInBatches(values []*model.MetricView, batchSize int) error
	Save(values ...*model.MetricView) error
	First() (*model.MetricView, error)
	Take() (*model.MetricView, error)
	Last() (*model.MetricView, error)
	Find() ([]*model.MetricView, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MetricView, err error)
	FindInBatches(result *[]*model.MetricView, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MetricView) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMetricViewDo
	Assign(attrs ...field.AssignExpr) IMetricViewDo
	Joins(fields ...field.RelationField) IMetricViewDo
	Preload(fields ...field.RelationField) IMetricViewDo
	FirstOrInit() (*model.MetricView, error)
	FirstOrCreate() (*model.MetricView, error)
	FindByPage(offset int, limit int) (result []*model.MetricView, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMetricViewDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m metricViewDo) Debug() IMetricViewDo {
	return m.withDO(m.DO.Debug())
}

func (m metricViewDo) WithContext(ctx context.Context) IMetricViewDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m metricViewDo) ReadDB() IMetricViewDo {
	return m.Clauses(dbresolver.Read)
}

func (m metricViewDo) WriteDB() IMetricViewDo {
	return m.Clauses(dbresolver.Write)
}

func (m metricViewDo) Session(config *gorm.Session) IMetricViewDo {
	return m.withDO(m.DO.Session(config))
}

func (m metricViewDo) Clauses(conds ...clause.Expression) IMetricViewDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m metricViewDo) Returning(value interface{}, columns ...string) IMetricViewDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m metricViewDo) Not(conds ...gen.Condition) IMetricViewDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m metricViewDo) Or(conds ...gen.Condition) IMetricViewDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m metricViewDo) Select(conds ...field.Expr) IMetricViewDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m metricViewDo) Where(conds ...gen.Condition) IMetricViewDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m metricViewDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMetricViewDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m metricViewDo) Order(conds ...field.Expr) IMetricViewDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m metricViewDo) Distinct(cols ...field.Expr) IMetricViewDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m metricViewDo) Omit(cols ...field.Expr) IMetricViewDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m metricViewDo) Join(table schema.Tabler, on ...field.Expr) IMetricViewDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m metricViewDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMetricViewDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m metricViewDo) RightJoin(table schema.Tabler, on ...field.Expr) IMetricViewDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m metricViewDo) Group(cols ...field.Expr) IMetricViewDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m metricViewDo) Having(conds ...gen.Condition) IMetricViewDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m metricViewDo) Limit(limit int) IMetricViewDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m metricViewDo) Offset(offset int) IMetricViewDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m metricViewDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMetricViewDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m metricViewDo) Unscoped() IMetricViewDo {
	return m.withDO(m.DO.Unscoped())
}

func (m metricViewDo) Create(values ...*model.MetricView) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m metricViewDo) CreateInBatches(values []*model.MetricView, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m metricViewDo) Save(values ...*model.MetricView) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m metricViewDo) First() (*model.MetricView, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MetricView), nil
	}
}

func (m metricViewDo) Take() (*model.MetricView, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MetricView), nil
	}
}

func (m metricViewDo) Last() (*model.MetricView, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MetricView), nil
	}
}

func (m metricViewDo) Find() ([]*model.MetricView, error) {
	result, err := m.DO.Find()
	return result.([]*model.MetricView), err
}

func (m metricViewDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MetricView, err error) {
	buf := make([]*model.MetricView, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m metricViewDo) FindInBatches(result *[]*model.MetricView, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m metricViewDo) Attrs(attrs ...field.AssignExpr) IMetricViewDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m metricViewDo) Assign(attrs ...field.AssignExpr) IMetricViewDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m metricViewDo) Joins(fields ...field.RelationField) IMetricViewDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m metricViewDo) Preload(fields ...field.RelationField) IMetricViewDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m metricViewDo) FirstOrInit() (*model.MetricView, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MetricView), nil
	}
}

func (m metricViewDo) FirstOrCreate() (*model.MetricView, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MetricView), nil
	}
}

func (m metricViewDo) FindByPage(offset int, limit int) (result []*model.MetricView, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m metricViewDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m metricViewDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m metricViewDo) Delete(models ...*model.MetricView) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *metricViewDo) withDO(do gen.Dao) *metricViewDo {
	m.DO = *do.(*gen.DO)
	return m
}
