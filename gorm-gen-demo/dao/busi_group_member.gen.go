// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm-gen-demo/model"
)

func newBusiGroupMember(db *gorm.DB, opts ...gen.DOOption) busiGroupMember {
	_busiGroupMember := busiGroupMember{}

	_busiGroupMember.busiGroupMemberDo.UseDB(db, opts...)
	_busiGroupMember.busiGroupMemberDo.UseModel(&model.BusiGroupMember{})

	tableName := _busiGroupMember.busiGroupMemberDo.TableName()
	_busiGroupMember.ALL = field.NewAsterisk(tableName)
	_busiGroupMember.ID = field.NewInt64(tableName, "id")
	_busiGroupMember.BusiGroupID = field.NewInt64(tableName, "busi_group_id")
	_busiGroupMember.UserGroupID = field.NewInt64(tableName, "user_group_id")
	_busiGroupMember.PermFlag = field.NewString(tableName, "perm_flag")

	_busiGroupMember.fillFieldMap()

	return _busiGroupMember
}

type busiGroupMember struct {
	busiGroupMemberDo

	ALL         field.Asterisk
	ID          field.Int64
	BusiGroupID field.Int64  // busi group id
	UserGroupID field.Int64  // user group id
	PermFlag    field.String // ro | rw

	fieldMap map[string]field.Expr
}

func (b busiGroupMember) Table(newTableName string) *busiGroupMember {
	b.busiGroupMemberDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b busiGroupMember) As(alias string) *busiGroupMember {
	b.busiGroupMemberDo.DO = *(b.busiGroupMemberDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *busiGroupMember) updateTableName(table string) *busiGroupMember {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt64(table, "id")
	b.BusiGroupID = field.NewInt64(table, "busi_group_id")
	b.UserGroupID = field.NewInt64(table, "user_group_id")
	b.PermFlag = field.NewString(table, "perm_flag")

	b.fillFieldMap()

	return b
}

func (b *busiGroupMember) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *busiGroupMember) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 4)
	b.fieldMap["id"] = b.ID
	b.fieldMap["busi_group_id"] = b.BusiGroupID
	b.fieldMap["user_group_id"] = b.UserGroupID
	b.fieldMap["perm_flag"] = b.PermFlag
}

func (b busiGroupMember) clone(db *gorm.DB) busiGroupMember {
	b.busiGroupMemberDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b busiGroupMember) replaceDB(db *gorm.DB) busiGroupMember {
	b.busiGroupMemberDo.ReplaceDB(db)
	return b
}

type busiGroupMemberDo struct{ gen.DO }

type IBusiGroupMemberDo interface {
	gen.SubQuery
	Debug() IBusiGroupMemberDo
	WithContext(ctx context.Context) IBusiGroupMemberDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBusiGroupMemberDo
	WriteDB() IBusiGroupMemberDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBusiGroupMemberDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBusiGroupMemberDo
	Not(conds ...gen.Condition) IBusiGroupMemberDo
	Or(conds ...gen.Condition) IBusiGroupMemberDo
	Select(conds ...field.Expr) IBusiGroupMemberDo
	Where(conds ...gen.Condition) IBusiGroupMemberDo
	Order(conds ...field.Expr) IBusiGroupMemberDo
	Distinct(cols ...field.Expr) IBusiGroupMemberDo
	Omit(cols ...field.Expr) IBusiGroupMemberDo
	Join(table schema.Tabler, on ...field.Expr) IBusiGroupMemberDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBusiGroupMemberDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBusiGroupMemberDo
	Group(cols ...field.Expr) IBusiGroupMemberDo
	Having(conds ...gen.Condition) IBusiGroupMemberDo
	Limit(limit int) IBusiGroupMemberDo
	Offset(offset int) IBusiGroupMemberDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBusiGroupMemberDo
	Unscoped() IBusiGroupMemberDo
	Create(values ...*model.BusiGroupMember) error
	CreateInBatches(values []*model.BusiGroupMember, batchSize int) error
	Save(values ...*model.BusiGroupMember) error
	First() (*model.BusiGroupMember, error)
	Take() (*model.BusiGroupMember, error)
	Last() (*model.BusiGroupMember, error)
	Find() ([]*model.BusiGroupMember, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BusiGroupMember, err error)
	FindInBatches(result *[]*model.BusiGroupMember, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BusiGroupMember) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBusiGroupMemberDo
	Assign(attrs ...field.AssignExpr) IBusiGroupMemberDo
	Joins(fields ...field.RelationField) IBusiGroupMemberDo
	Preload(fields ...field.RelationField) IBusiGroupMemberDo
	FirstOrInit() (*model.BusiGroupMember, error)
	FirstOrCreate() (*model.BusiGroupMember, error)
	FindByPage(offset int, limit int) (result []*model.BusiGroupMember, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBusiGroupMemberDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b busiGroupMemberDo) Debug() IBusiGroupMemberDo {
	return b.withDO(b.DO.Debug())
}

func (b busiGroupMemberDo) WithContext(ctx context.Context) IBusiGroupMemberDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b busiGroupMemberDo) ReadDB() IBusiGroupMemberDo {
	return b.Clauses(dbresolver.Read)
}

func (b busiGroupMemberDo) WriteDB() IBusiGroupMemberDo {
	return b.Clauses(dbresolver.Write)
}

func (b busiGroupMemberDo) Session(config *gorm.Session) IBusiGroupMemberDo {
	return b.withDO(b.DO.Session(config))
}

func (b busiGroupMemberDo) Clauses(conds ...clause.Expression) IBusiGroupMemberDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b busiGroupMemberDo) Returning(value interface{}, columns ...string) IBusiGroupMemberDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b busiGroupMemberDo) Not(conds ...gen.Condition) IBusiGroupMemberDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b busiGroupMemberDo) Or(conds ...gen.Condition) IBusiGroupMemberDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b busiGroupMemberDo) Select(conds ...field.Expr) IBusiGroupMemberDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b busiGroupMemberDo) Where(conds ...gen.Condition) IBusiGroupMemberDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b busiGroupMemberDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IBusiGroupMemberDo {
	return b.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (b busiGroupMemberDo) Order(conds ...field.Expr) IBusiGroupMemberDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b busiGroupMemberDo) Distinct(cols ...field.Expr) IBusiGroupMemberDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b busiGroupMemberDo) Omit(cols ...field.Expr) IBusiGroupMemberDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b busiGroupMemberDo) Join(table schema.Tabler, on ...field.Expr) IBusiGroupMemberDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b busiGroupMemberDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBusiGroupMemberDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b busiGroupMemberDo) RightJoin(table schema.Tabler, on ...field.Expr) IBusiGroupMemberDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b busiGroupMemberDo) Group(cols ...field.Expr) IBusiGroupMemberDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b busiGroupMemberDo) Having(conds ...gen.Condition) IBusiGroupMemberDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b busiGroupMemberDo) Limit(limit int) IBusiGroupMemberDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b busiGroupMemberDo) Offset(offset int) IBusiGroupMemberDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b busiGroupMemberDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBusiGroupMemberDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b busiGroupMemberDo) Unscoped() IBusiGroupMemberDo {
	return b.withDO(b.DO.Unscoped())
}

func (b busiGroupMemberDo) Create(values ...*model.BusiGroupMember) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b busiGroupMemberDo) CreateInBatches(values []*model.BusiGroupMember, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b busiGroupMemberDo) Save(values ...*model.BusiGroupMember) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b busiGroupMemberDo) First() (*model.BusiGroupMember, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BusiGroupMember), nil
	}
}

func (b busiGroupMemberDo) Take() (*model.BusiGroupMember, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BusiGroupMember), nil
	}
}

func (b busiGroupMemberDo) Last() (*model.BusiGroupMember, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BusiGroupMember), nil
	}
}

func (b busiGroupMemberDo) Find() ([]*model.BusiGroupMember, error) {
	result, err := b.DO.Find()
	return result.([]*model.BusiGroupMember), err
}

func (b busiGroupMemberDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BusiGroupMember, err error) {
	buf := make([]*model.BusiGroupMember, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b busiGroupMemberDo) FindInBatches(result *[]*model.BusiGroupMember, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b busiGroupMemberDo) Attrs(attrs ...field.AssignExpr) IBusiGroupMemberDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b busiGroupMemberDo) Assign(attrs ...field.AssignExpr) IBusiGroupMemberDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b busiGroupMemberDo) Joins(fields ...field.RelationField) IBusiGroupMemberDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b busiGroupMemberDo) Preload(fields ...field.RelationField) IBusiGroupMemberDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b busiGroupMemberDo) FirstOrInit() (*model.BusiGroupMember, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BusiGroupMember), nil
	}
}

func (b busiGroupMemberDo) FirstOrCreate() (*model.BusiGroupMember, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BusiGroupMember), nil
	}
}

func (b busiGroupMemberDo) FindByPage(offset int, limit int) (result []*model.BusiGroupMember, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b busiGroupMemberDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b busiGroupMemberDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b busiGroupMemberDo) Delete(models ...*model.BusiGroupMember) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *busiGroupMemberDo) withDO(do gen.Dao) *busiGroupMemberDo {
	b.DO = *do.(*gen.DO)
	return b
}
