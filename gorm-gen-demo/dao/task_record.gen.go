// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm-gen-demo/model"
)

func newTaskRecord(db *gorm.DB, opts ...gen.DOOption) taskRecord {
	_taskRecord := taskRecord{}

	_taskRecord.taskRecordDo.UseDB(db, opts...)
	_taskRecord.taskRecordDo.UseModel(&model.TaskRecord{})

	tableName := _taskRecord.taskRecordDo.TableName()
	_taskRecord.ALL = field.NewAsterisk(tableName)
	_taskRecord.ID = field.NewInt64(tableName, "id")
	_taskRecord.GroupID = field.NewInt64(tableName, "group_id")
	_taskRecord.IbexAddress = field.NewString(tableName, "ibex_address")
	_taskRecord.IbexAuthUser = field.NewString(tableName, "ibex_auth_user")
	_taskRecord.IbexAuthPass = field.NewString(tableName, "ibex_auth_pass")
	_taskRecord.Title = field.NewString(tableName, "title")
	_taskRecord.Account = field.NewString(tableName, "account")
	_taskRecord.Batch = field.NewInt64(tableName, "batch")
	_taskRecord.Tolerance = field.NewInt64(tableName, "tolerance")
	_taskRecord.Timeout = field.NewInt64(tableName, "timeout")
	_taskRecord.Pause = field.NewString(tableName, "pause")
	_taskRecord.Script = field.NewString(tableName, "script")
	_taskRecord.Args = field.NewString(tableName, "args")
	_taskRecord.CreateAt = field.NewInt64(tableName, "create_at")
	_taskRecord.CreateBy = field.NewString(tableName, "create_by")

	_taskRecord.fillFieldMap()

	return _taskRecord
}

type taskRecord struct {
	taskRecordDo

	ALL          field.Asterisk
	ID           field.Int64 // ibex task id
	GroupID      field.Int64 // busi group id
	IbexAddress  field.String
	IbexAuthUser field.String
	IbexAuthPass field.String
	Title        field.String
	Account      field.String
	Batch        field.Int64
	Tolerance    field.Int64
	Timeout      field.Int64
	Pause        field.String
	Script       field.String
	Args         field.String
	CreateAt     field.Int64
	CreateBy     field.String

	fieldMap map[string]field.Expr
}

func (t taskRecord) Table(newTableName string) *taskRecord {
	t.taskRecordDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t taskRecord) As(alias string) *taskRecord {
	t.taskRecordDo.DO = *(t.taskRecordDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *taskRecord) updateTableName(table string) *taskRecord {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.GroupID = field.NewInt64(table, "group_id")
	t.IbexAddress = field.NewString(table, "ibex_address")
	t.IbexAuthUser = field.NewString(table, "ibex_auth_user")
	t.IbexAuthPass = field.NewString(table, "ibex_auth_pass")
	t.Title = field.NewString(table, "title")
	t.Account = field.NewString(table, "account")
	t.Batch = field.NewInt64(table, "batch")
	t.Tolerance = field.NewInt64(table, "tolerance")
	t.Timeout = field.NewInt64(table, "timeout")
	t.Pause = field.NewString(table, "pause")
	t.Script = field.NewString(table, "script")
	t.Args = field.NewString(table, "args")
	t.CreateAt = field.NewInt64(table, "create_at")
	t.CreateBy = field.NewString(table, "create_by")

	t.fillFieldMap()

	return t
}

func (t *taskRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *taskRecord) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 15)
	t.fieldMap["id"] = t.ID
	t.fieldMap["group_id"] = t.GroupID
	t.fieldMap["ibex_address"] = t.IbexAddress
	t.fieldMap["ibex_auth_user"] = t.IbexAuthUser
	t.fieldMap["ibex_auth_pass"] = t.IbexAuthPass
	t.fieldMap["title"] = t.Title
	t.fieldMap["account"] = t.Account
	t.fieldMap["batch"] = t.Batch
	t.fieldMap["tolerance"] = t.Tolerance
	t.fieldMap["timeout"] = t.Timeout
	t.fieldMap["pause"] = t.Pause
	t.fieldMap["script"] = t.Script
	t.fieldMap["args"] = t.Args
	t.fieldMap["create_at"] = t.CreateAt
	t.fieldMap["create_by"] = t.CreateBy
}

func (t taskRecord) clone(db *gorm.DB) taskRecord {
	t.taskRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t taskRecord) replaceDB(db *gorm.DB) taskRecord {
	t.taskRecordDo.ReplaceDB(db)
	return t
}

type taskRecordDo struct{ gen.DO }

type ITaskRecordDo interface {
	gen.SubQuery
	Debug() ITaskRecordDo
	WithContext(ctx context.Context) ITaskRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITaskRecordDo
	WriteDB() ITaskRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITaskRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITaskRecordDo
	Not(conds ...gen.Condition) ITaskRecordDo
	Or(conds ...gen.Condition) ITaskRecordDo
	Select(conds ...field.Expr) ITaskRecordDo
	Where(conds ...gen.Condition) ITaskRecordDo
	Order(conds ...field.Expr) ITaskRecordDo
	Distinct(cols ...field.Expr) ITaskRecordDo
	Omit(cols ...field.Expr) ITaskRecordDo
	Join(table schema.Tabler, on ...field.Expr) ITaskRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITaskRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITaskRecordDo
	Group(cols ...field.Expr) ITaskRecordDo
	Having(conds ...gen.Condition) ITaskRecordDo
	Limit(limit int) ITaskRecordDo
	Offset(offset int) ITaskRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITaskRecordDo
	Unscoped() ITaskRecordDo
	Create(values ...*model.TaskRecord) error
	CreateInBatches(values []*model.TaskRecord, batchSize int) error
	Save(values ...*model.TaskRecord) error
	First() (*model.TaskRecord, error)
	Take() (*model.TaskRecord, error)
	Last() (*model.TaskRecord, error)
	Find() ([]*model.TaskRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TaskRecord, err error)
	FindInBatches(result *[]*model.TaskRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TaskRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITaskRecordDo
	Assign(attrs ...field.AssignExpr) ITaskRecordDo
	Joins(fields ...field.RelationField) ITaskRecordDo
	Preload(fields ...field.RelationField) ITaskRecordDo
	FirstOrInit() (*model.TaskRecord, error)
	FirstOrCreate() (*model.TaskRecord, error)
	FindByPage(offset int, limit int) (result []*model.TaskRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITaskRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t taskRecordDo) Debug() ITaskRecordDo {
	return t.withDO(t.DO.Debug())
}

func (t taskRecordDo) WithContext(ctx context.Context) ITaskRecordDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t taskRecordDo) ReadDB() ITaskRecordDo {
	return t.Clauses(dbresolver.Read)
}

func (t taskRecordDo) WriteDB() ITaskRecordDo {
	return t.Clauses(dbresolver.Write)
}

func (t taskRecordDo) Session(config *gorm.Session) ITaskRecordDo {
	return t.withDO(t.DO.Session(config))
}

func (t taskRecordDo) Clauses(conds ...clause.Expression) ITaskRecordDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t taskRecordDo) Returning(value interface{}, columns ...string) ITaskRecordDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t taskRecordDo) Not(conds ...gen.Condition) ITaskRecordDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t taskRecordDo) Or(conds ...gen.Condition) ITaskRecordDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t taskRecordDo) Select(conds ...field.Expr) ITaskRecordDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t taskRecordDo) Where(conds ...gen.Condition) ITaskRecordDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t taskRecordDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITaskRecordDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t taskRecordDo) Order(conds ...field.Expr) ITaskRecordDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t taskRecordDo) Distinct(cols ...field.Expr) ITaskRecordDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t taskRecordDo) Omit(cols ...field.Expr) ITaskRecordDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t taskRecordDo) Join(table schema.Tabler, on ...field.Expr) ITaskRecordDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t taskRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITaskRecordDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t taskRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) ITaskRecordDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t taskRecordDo) Group(cols ...field.Expr) ITaskRecordDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t taskRecordDo) Having(conds ...gen.Condition) ITaskRecordDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t taskRecordDo) Limit(limit int) ITaskRecordDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t taskRecordDo) Offset(offset int) ITaskRecordDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t taskRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITaskRecordDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t taskRecordDo) Unscoped() ITaskRecordDo {
	return t.withDO(t.DO.Unscoped())
}

func (t taskRecordDo) Create(values ...*model.TaskRecord) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t taskRecordDo) CreateInBatches(values []*model.TaskRecord, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t taskRecordDo) Save(values ...*model.TaskRecord) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t taskRecordDo) First() (*model.TaskRecord, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskRecord), nil
	}
}

func (t taskRecordDo) Take() (*model.TaskRecord, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskRecord), nil
	}
}

func (t taskRecordDo) Last() (*model.TaskRecord, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskRecord), nil
	}
}

func (t taskRecordDo) Find() ([]*model.TaskRecord, error) {
	result, err := t.DO.Find()
	return result.([]*model.TaskRecord), err
}

func (t taskRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TaskRecord, err error) {
	buf := make([]*model.TaskRecord, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t taskRecordDo) FindInBatches(result *[]*model.TaskRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t taskRecordDo) Attrs(attrs ...field.AssignExpr) ITaskRecordDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t taskRecordDo) Assign(attrs ...field.AssignExpr) ITaskRecordDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t taskRecordDo) Joins(fields ...field.RelationField) ITaskRecordDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t taskRecordDo) Preload(fields ...field.RelationField) ITaskRecordDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t taskRecordDo) FirstOrInit() (*model.TaskRecord, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskRecord), nil
	}
}

func (t taskRecordDo) FirstOrCreate() (*model.TaskRecord, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskRecord), nil
	}
}

func (t taskRecordDo) FindByPage(offset int, limit int) (result []*model.TaskRecord, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t taskRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t taskRecordDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t taskRecordDo) Delete(models ...*model.TaskRecord) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *taskRecordDo) withDO(do gen.Dao) *taskRecordDo {
	t.DO = *do.(*gen.DO)
	return t
}
