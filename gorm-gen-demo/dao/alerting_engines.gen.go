// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm-gen-demo/model"
)

func newAlertingEngine(db *gorm.DB, opts ...gen.DOOption) alertingEngine {
	_alertingEngine := alertingEngine{}

	_alertingEngine.alertingEngineDo.UseDB(db, opts...)
	_alertingEngine.alertingEngineDo.UseModel(&model.AlertingEngine{})

	tableName := _alertingEngine.alertingEngineDo.TableName()
	_alertingEngine.ALL = field.NewAsterisk(tableName)
	_alertingEngine.ID = field.NewInt64(tableName, "id")
	_alertingEngine.Instance = field.NewString(tableName, "instance")
	_alertingEngine.DatasourceID = field.NewInt64(tableName, "datasource_id")
	_alertingEngine.Cluster = field.NewString(tableName, "cluster")
	_alertingEngine.Clock = field.NewInt64(tableName, "clock")

	_alertingEngine.fillFieldMap()

	return _alertingEngine
}

type alertingEngine struct {
	alertingEngineDo

	ALL          field.Asterisk
	ID           field.Int64
	Instance     field.String // instance identification, e.g. 10.9.0.9:9090
	DatasourceID field.Int64  // datasource id
	Cluster      field.String // n9e-alert cluster
	Clock        field.Int64

	fieldMap map[string]field.Expr
}

func (a alertingEngine) Table(newTableName string) *alertingEngine {
	a.alertingEngineDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a alertingEngine) As(alias string) *alertingEngine {
	a.alertingEngineDo.DO = *(a.alertingEngineDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *alertingEngine) updateTableName(table string) *alertingEngine {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Instance = field.NewString(table, "instance")
	a.DatasourceID = field.NewInt64(table, "datasource_id")
	a.Cluster = field.NewString(table, "cluster")
	a.Clock = field.NewInt64(table, "clock")

	a.fillFieldMap()

	return a
}

func (a *alertingEngine) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *alertingEngine) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 5)
	a.fieldMap["id"] = a.ID
	a.fieldMap["instance"] = a.Instance
	a.fieldMap["datasource_id"] = a.DatasourceID
	a.fieldMap["cluster"] = a.Cluster
	a.fieldMap["clock"] = a.Clock
}

func (a alertingEngine) clone(db *gorm.DB) alertingEngine {
	a.alertingEngineDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a alertingEngine) replaceDB(db *gorm.DB) alertingEngine {
	a.alertingEngineDo.ReplaceDB(db)
	return a
}

type alertingEngineDo struct{ gen.DO }

type IAlertingEngineDo interface {
	gen.SubQuery
	Debug() IAlertingEngineDo
	WithContext(ctx context.Context) IAlertingEngineDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAlertingEngineDo
	WriteDB() IAlertingEngineDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAlertingEngineDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAlertingEngineDo
	Not(conds ...gen.Condition) IAlertingEngineDo
	Or(conds ...gen.Condition) IAlertingEngineDo
	Select(conds ...field.Expr) IAlertingEngineDo
	Where(conds ...gen.Condition) IAlertingEngineDo
	Order(conds ...field.Expr) IAlertingEngineDo
	Distinct(cols ...field.Expr) IAlertingEngineDo
	Omit(cols ...field.Expr) IAlertingEngineDo
	Join(table schema.Tabler, on ...field.Expr) IAlertingEngineDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAlertingEngineDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAlertingEngineDo
	Group(cols ...field.Expr) IAlertingEngineDo
	Having(conds ...gen.Condition) IAlertingEngineDo
	Limit(limit int) IAlertingEngineDo
	Offset(offset int) IAlertingEngineDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAlertingEngineDo
	Unscoped() IAlertingEngineDo
	Create(values ...*model.AlertingEngine) error
	CreateInBatches(values []*model.AlertingEngine, batchSize int) error
	Save(values ...*model.AlertingEngine) error
	First() (*model.AlertingEngine, error)
	Take() (*model.AlertingEngine, error)
	Last() (*model.AlertingEngine, error)
	Find() ([]*model.AlertingEngine, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AlertingEngine, err error)
	FindInBatches(result *[]*model.AlertingEngine, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AlertingEngine) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAlertingEngineDo
	Assign(attrs ...field.AssignExpr) IAlertingEngineDo
	Joins(fields ...field.RelationField) IAlertingEngineDo
	Preload(fields ...field.RelationField) IAlertingEngineDo
	FirstOrInit() (*model.AlertingEngine, error)
	FirstOrCreate() (*model.AlertingEngine, error)
	FindByPage(offset int, limit int) (result []*model.AlertingEngine, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAlertingEngineDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a alertingEngineDo) Debug() IAlertingEngineDo {
	return a.withDO(a.DO.Debug())
}

func (a alertingEngineDo) WithContext(ctx context.Context) IAlertingEngineDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a alertingEngineDo) ReadDB() IAlertingEngineDo {
	return a.Clauses(dbresolver.Read)
}

func (a alertingEngineDo) WriteDB() IAlertingEngineDo {
	return a.Clauses(dbresolver.Write)
}

func (a alertingEngineDo) Session(config *gorm.Session) IAlertingEngineDo {
	return a.withDO(a.DO.Session(config))
}

func (a alertingEngineDo) Clauses(conds ...clause.Expression) IAlertingEngineDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a alertingEngineDo) Returning(value interface{}, columns ...string) IAlertingEngineDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a alertingEngineDo) Not(conds ...gen.Condition) IAlertingEngineDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a alertingEngineDo) Or(conds ...gen.Condition) IAlertingEngineDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a alertingEngineDo) Select(conds ...field.Expr) IAlertingEngineDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a alertingEngineDo) Where(conds ...gen.Condition) IAlertingEngineDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a alertingEngineDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAlertingEngineDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a alertingEngineDo) Order(conds ...field.Expr) IAlertingEngineDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a alertingEngineDo) Distinct(cols ...field.Expr) IAlertingEngineDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a alertingEngineDo) Omit(cols ...field.Expr) IAlertingEngineDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a alertingEngineDo) Join(table schema.Tabler, on ...field.Expr) IAlertingEngineDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a alertingEngineDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAlertingEngineDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a alertingEngineDo) RightJoin(table schema.Tabler, on ...field.Expr) IAlertingEngineDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a alertingEngineDo) Group(cols ...field.Expr) IAlertingEngineDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a alertingEngineDo) Having(conds ...gen.Condition) IAlertingEngineDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a alertingEngineDo) Limit(limit int) IAlertingEngineDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a alertingEngineDo) Offset(offset int) IAlertingEngineDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a alertingEngineDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAlertingEngineDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a alertingEngineDo) Unscoped() IAlertingEngineDo {
	return a.withDO(a.DO.Unscoped())
}

func (a alertingEngineDo) Create(values ...*model.AlertingEngine) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a alertingEngineDo) CreateInBatches(values []*model.AlertingEngine, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a alertingEngineDo) Save(values ...*model.AlertingEngine) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a alertingEngineDo) First() (*model.AlertingEngine, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlertingEngine), nil
	}
}

func (a alertingEngineDo) Take() (*model.AlertingEngine, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlertingEngine), nil
	}
}

func (a alertingEngineDo) Last() (*model.AlertingEngine, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlertingEngine), nil
	}
}

func (a alertingEngineDo) Find() ([]*model.AlertingEngine, error) {
	result, err := a.DO.Find()
	return result.([]*model.AlertingEngine), err
}

func (a alertingEngineDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AlertingEngine, err error) {
	buf := make([]*model.AlertingEngine, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a alertingEngineDo) FindInBatches(result *[]*model.AlertingEngine, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a alertingEngineDo) Attrs(attrs ...field.AssignExpr) IAlertingEngineDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a alertingEngineDo) Assign(attrs ...field.AssignExpr) IAlertingEngineDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a alertingEngineDo) Joins(fields ...field.RelationField) IAlertingEngineDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a alertingEngineDo) Preload(fields ...field.RelationField) IAlertingEngineDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a alertingEngineDo) FirstOrInit() (*model.AlertingEngine, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlertingEngine), nil
	}
}

func (a alertingEngineDo) FirstOrCreate() (*model.AlertingEngine, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlertingEngine), nil
	}
}

func (a alertingEngineDo) FindByPage(offset int, limit int) (result []*model.AlertingEngine, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a alertingEngineDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a alertingEngineDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a alertingEngineDo) Delete(models ...*model.AlertingEngine) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *alertingEngineDo) withDO(do gen.Dao) *alertingEngineDo {
	a.DO = *do.(*gen.DO)
	return a
}
