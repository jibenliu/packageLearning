// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm-gen-demo/model"
)

func newSsoConfig(db *gorm.DB, opts ...gen.DOOption) ssoConfig {
	_ssoConfig := ssoConfig{}

	_ssoConfig.ssoConfigDo.UseDB(db, opts...)
	_ssoConfig.ssoConfigDo.UseModel(&model.SsoConfig{})

	tableName := _ssoConfig.ssoConfigDo.TableName()
	_ssoConfig.ALL = field.NewAsterisk(tableName)
	_ssoConfig.ID = field.NewInt64(tableName, "id")
	_ssoConfig.Name = field.NewString(tableName, "name")
	_ssoConfig.Content = field.NewString(tableName, "content")

	_ssoConfig.fillFieldMap()

	return _ssoConfig
}

type ssoConfig struct {
	ssoConfigDo

	ALL     field.Asterisk
	ID      field.Int64
	Name    field.String
	Content field.String

	fieldMap map[string]field.Expr
}

func (s ssoConfig) Table(newTableName string) *ssoConfig {
	s.ssoConfigDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s ssoConfig) As(alias string) *ssoConfig {
	s.ssoConfigDo.DO = *(s.ssoConfigDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *ssoConfig) updateTableName(table string) *ssoConfig {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Name = field.NewString(table, "name")
	s.Content = field.NewString(table, "content")

	s.fillFieldMap()

	return s
}

func (s *ssoConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *ssoConfig) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["content"] = s.Content
}

func (s ssoConfig) clone(db *gorm.DB) ssoConfig {
	s.ssoConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s ssoConfig) replaceDB(db *gorm.DB) ssoConfig {
	s.ssoConfigDo.ReplaceDB(db)
	return s
}

type ssoConfigDo struct{ gen.DO }

type ISsoConfigDo interface {
	gen.SubQuery
	Debug() ISsoConfigDo
	WithContext(ctx context.Context) ISsoConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISsoConfigDo
	WriteDB() ISsoConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISsoConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISsoConfigDo
	Not(conds ...gen.Condition) ISsoConfigDo
	Or(conds ...gen.Condition) ISsoConfigDo
	Select(conds ...field.Expr) ISsoConfigDo
	Where(conds ...gen.Condition) ISsoConfigDo
	Order(conds ...field.Expr) ISsoConfigDo
	Distinct(cols ...field.Expr) ISsoConfigDo
	Omit(cols ...field.Expr) ISsoConfigDo
	Join(table schema.Tabler, on ...field.Expr) ISsoConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISsoConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISsoConfigDo
	Group(cols ...field.Expr) ISsoConfigDo
	Having(conds ...gen.Condition) ISsoConfigDo
	Limit(limit int) ISsoConfigDo
	Offset(offset int) ISsoConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISsoConfigDo
	Unscoped() ISsoConfigDo
	Create(values ...*model.SsoConfig) error
	CreateInBatches(values []*model.SsoConfig, batchSize int) error
	Save(values ...*model.SsoConfig) error
	First() (*model.SsoConfig, error)
	Take() (*model.SsoConfig, error)
	Last() (*model.SsoConfig, error)
	Find() ([]*model.SsoConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SsoConfig, err error)
	FindInBatches(result *[]*model.SsoConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SsoConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISsoConfigDo
	Assign(attrs ...field.AssignExpr) ISsoConfigDo
	Joins(fields ...field.RelationField) ISsoConfigDo
	Preload(fields ...field.RelationField) ISsoConfigDo
	FirstOrInit() (*model.SsoConfig, error)
	FirstOrCreate() (*model.SsoConfig, error)
	FindByPage(offset int, limit int) (result []*model.SsoConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISsoConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s ssoConfigDo) Debug() ISsoConfigDo {
	return s.withDO(s.DO.Debug())
}

func (s ssoConfigDo) WithContext(ctx context.Context) ISsoConfigDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s ssoConfigDo) ReadDB() ISsoConfigDo {
	return s.Clauses(dbresolver.Read)
}

func (s ssoConfigDo) WriteDB() ISsoConfigDo {
	return s.Clauses(dbresolver.Write)
}

func (s ssoConfigDo) Session(config *gorm.Session) ISsoConfigDo {
	return s.withDO(s.DO.Session(config))
}

func (s ssoConfigDo) Clauses(conds ...clause.Expression) ISsoConfigDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s ssoConfigDo) Returning(value interface{}, columns ...string) ISsoConfigDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s ssoConfigDo) Not(conds ...gen.Condition) ISsoConfigDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s ssoConfigDo) Or(conds ...gen.Condition) ISsoConfigDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s ssoConfigDo) Select(conds ...field.Expr) ISsoConfigDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s ssoConfigDo) Where(conds ...gen.Condition) ISsoConfigDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s ssoConfigDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISsoConfigDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s ssoConfigDo) Order(conds ...field.Expr) ISsoConfigDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s ssoConfigDo) Distinct(cols ...field.Expr) ISsoConfigDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s ssoConfigDo) Omit(cols ...field.Expr) ISsoConfigDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s ssoConfigDo) Join(table schema.Tabler, on ...field.Expr) ISsoConfigDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s ssoConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISsoConfigDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s ssoConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) ISsoConfigDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s ssoConfigDo) Group(cols ...field.Expr) ISsoConfigDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s ssoConfigDo) Having(conds ...gen.Condition) ISsoConfigDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s ssoConfigDo) Limit(limit int) ISsoConfigDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s ssoConfigDo) Offset(offset int) ISsoConfigDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s ssoConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISsoConfigDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s ssoConfigDo) Unscoped() ISsoConfigDo {
	return s.withDO(s.DO.Unscoped())
}

func (s ssoConfigDo) Create(values ...*model.SsoConfig) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s ssoConfigDo) CreateInBatches(values []*model.SsoConfig, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s ssoConfigDo) Save(values ...*model.SsoConfig) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s ssoConfigDo) First() (*model.SsoConfig, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SsoConfig), nil
	}
}

func (s ssoConfigDo) Take() (*model.SsoConfig, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SsoConfig), nil
	}
}

func (s ssoConfigDo) Last() (*model.SsoConfig, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SsoConfig), nil
	}
}

func (s ssoConfigDo) Find() ([]*model.SsoConfig, error) {
	result, err := s.DO.Find()
	return result.([]*model.SsoConfig), err
}

func (s ssoConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SsoConfig, err error) {
	buf := make([]*model.SsoConfig, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s ssoConfigDo) FindInBatches(result *[]*model.SsoConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s ssoConfigDo) Attrs(attrs ...field.AssignExpr) ISsoConfigDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s ssoConfigDo) Assign(attrs ...field.AssignExpr) ISsoConfigDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s ssoConfigDo) Joins(fields ...field.RelationField) ISsoConfigDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s ssoConfigDo) Preload(fields ...field.RelationField) ISsoConfigDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s ssoConfigDo) FirstOrInit() (*model.SsoConfig, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SsoConfig), nil
	}
}

func (s ssoConfigDo) FirstOrCreate() (*model.SsoConfig, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SsoConfig), nil
	}
}

func (s ssoConfigDo) FindByPage(offset int, limit int) (result []*model.SsoConfig, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s ssoConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s ssoConfigDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s ssoConfigDo) Delete(models ...*model.SsoConfig) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *ssoConfigDo) withDO(do gen.Dao) *ssoConfigDo {
	s.DO = *do.(*gen.DO)
	return s
}
