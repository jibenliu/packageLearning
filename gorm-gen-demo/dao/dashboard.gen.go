// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm-gen-demo/model"
)

func newDashboard(db *gorm.DB, opts ...gen.DOOption) dashboard {
	_dashboard := dashboard{}

	_dashboard.dashboardDo.UseDB(db, opts...)
	_dashboard.dashboardDo.UseModel(&model.Dashboard{})

	tableName := _dashboard.dashboardDo.TableName()
	_dashboard.ALL = field.NewAsterisk(tableName)
	_dashboard.ID = field.NewInt64(tableName, "id")
	_dashboard.GroupID = field.NewInt64(tableName, "group_id")
	_dashboard.Name = field.NewString(tableName, "name")
	_dashboard.Tags = field.NewString(tableName, "tags")
	_dashboard.Configs = field.NewString(tableName, "configs")
	_dashboard.CreateAt = field.NewInt64(tableName, "create_at")
	_dashboard.CreateBy = field.NewString(tableName, "create_by")
	_dashboard.UpdateAt = field.NewInt64(tableName, "update_at")
	_dashboard.UpdateBy = field.NewString(tableName, "update_by")

	_dashboard.fillFieldMap()

	return _dashboard
}

type dashboard struct {
	dashboardDo

	ALL      field.Asterisk
	ID       field.Int64
	GroupID  field.Int64 // busi group id
	Name     field.String
	Tags     field.String // split by space
	Configs  field.String // dashboard variables
	CreateAt field.Int64
	CreateBy field.String
	UpdateAt field.Int64
	UpdateBy field.String

	fieldMap map[string]field.Expr
}

func (d dashboard) Table(newTableName string) *dashboard {
	d.dashboardDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dashboard) As(alias string) *dashboard {
	d.dashboardDo.DO = *(d.dashboardDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dashboard) updateTableName(table string) *dashboard {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.GroupID = field.NewInt64(table, "group_id")
	d.Name = field.NewString(table, "name")
	d.Tags = field.NewString(table, "tags")
	d.Configs = field.NewString(table, "configs")
	d.CreateAt = field.NewInt64(table, "create_at")
	d.CreateBy = field.NewString(table, "create_by")
	d.UpdateAt = field.NewInt64(table, "update_at")
	d.UpdateBy = field.NewString(table, "update_by")

	d.fillFieldMap()

	return d
}

func (d *dashboard) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dashboard) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 9)
	d.fieldMap["id"] = d.ID
	d.fieldMap["group_id"] = d.GroupID
	d.fieldMap["name"] = d.Name
	d.fieldMap["tags"] = d.Tags
	d.fieldMap["configs"] = d.Configs
	d.fieldMap["create_at"] = d.CreateAt
	d.fieldMap["create_by"] = d.CreateBy
	d.fieldMap["update_at"] = d.UpdateAt
	d.fieldMap["update_by"] = d.UpdateBy
}

func (d dashboard) clone(db *gorm.DB) dashboard {
	d.dashboardDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dashboard) replaceDB(db *gorm.DB) dashboard {
	d.dashboardDo.ReplaceDB(db)
	return d
}

type dashboardDo struct{ gen.DO }

type IDashboardDo interface {
	gen.SubQuery
	Debug() IDashboardDo
	WithContext(ctx context.Context) IDashboardDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDashboardDo
	WriteDB() IDashboardDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDashboardDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDashboardDo
	Not(conds ...gen.Condition) IDashboardDo
	Or(conds ...gen.Condition) IDashboardDo
	Select(conds ...field.Expr) IDashboardDo
	Where(conds ...gen.Condition) IDashboardDo
	Order(conds ...field.Expr) IDashboardDo
	Distinct(cols ...field.Expr) IDashboardDo
	Omit(cols ...field.Expr) IDashboardDo
	Join(table schema.Tabler, on ...field.Expr) IDashboardDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDashboardDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDashboardDo
	Group(cols ...field.Expr) IDashboardDo
	Having(conds ...gen.Condition) IDashboardDo
	Limit(limit int) IDashboardDo
	Offset(offset int) IDashboardDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDashboardDo
	Unscoped() IDashboardDo
	Create(values ...*model.Dashboard) error
	CreateInBatches(values []*model.Dashboard, batchSize int) error
	Save(values ...*model.Dashboard) error
	First() (*model.Dashboard, error)
	Take() (*model.Dashboard, error)
	Last() (*model.Dashboard, error)
	Find() ([]*model.Dashboard, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Dashboard, err error)
	FindInBatches(result *[]*model.Dashboard, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Dashboard) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDashboardDo
	Assign(attrs ...field.AssignExpr) IDashboardDo
	Joins(fields ...field.RelationField) IDashboardDo
	Preload(fields ...field.RelationField) IDashboardDo
	FirstOrInit() (*model.Dashboard, error)
	FirstOrCreate() (*model.Dashboard, error)
	FindByPage(offset int, limit int) (result []*model.Dashboard, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDashboardDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dashboardDo) Debug() IDashboardDo {
	return d.withDO(d.DO.Debug())
}

func (d dashboardDo) WithContext(ctx context.Context) IDashboardDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dashboardDo) ReadDB() IDashboardDo {
	return d.Clauses(dbresolver.Read)
}

func (d dashboardDo) WriteDB() IDashboardDo {
	return d.Clauses(dbresolver.Write)
}

func (d dashboardDo) Session(config *gorm.Session) IDashboardDo {
	return d.withDO(d.DO.Session(config))
}

func (d dashboardDo) Clauses(conds ...clause.Expression) IDashboardDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dashboardDo) Returning(value interface{}, columns ...string) IDashboardDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dashboardDo) Not(conds ...gen.Condition) IDashboardDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dashboardDo) Or(conds ...gen.Condition) IDashboardDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dashboardDo) Select(conds ...field.Expr) IDashboardDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dashboardDo) Where(conds ...gen.Condition) IDashboardDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dashboardDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDashboardDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d dashboardDo) Order(conds ...field.Expr) IDashboardDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dashboardDo) Distinct(cols ...field.Expr) IDashboardDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dashboardDo) Omit(cols ...field.Expr) IDashboardDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dashboardDo) Join(table schema.Tabler, on ...field.Expr) IDashboardDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dashboardDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDashboardDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dashboardDo) RightJoin(table schema.Tabler, on ...field.Expr) IDashboardDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dashboardDo) Group(cols ...field.Expr) IDashboardDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dashboardDo) Having(conds ...gen.Condition) IDashboardDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dashboardDo) Limit(limit int) IDashboardDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dashboardDo) Offset(offset int) IDashboardDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dashboardDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDashboardDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dashboardDo) Unscoped() IDashboardDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dashboardDo) Create(values ...*model.Dashboard) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dashboardDo) CreateInBatches(values []*model.Dashboard, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dashboardDo) Save(values ...*model.Dashboard) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dashboardDo) First() (*model.Dashboard, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dashboard), nil
	}
}

func (d dashboardDo) Take() (*model.Dashboard, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dashboard), nil
	}
}

func (d dashboardDo) Last() (*model.Dashboard, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dashboard), nil
	}
}

func (d dashboardDo) Find() ([]*model.Dashboard, error) {
	result, err := d.DO.Find()
	return result.([]*model.Dashboard), err
}

func (d dashboardDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Dashboard, err error) {
	buf := make([]*model.Dashboard, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dashboardDo) FindInBatches(result *[]*model.Dashboard, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dashboardDo) Attrs(attrs ...field.AssignExpr) IDashboardDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dashboardDo) Assign(attrs ...field.AssignExpr) IDashboardDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dashboardDo) Joins(fields ...field.RelationField) IDashboardDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dashboardDo) Preload(fields ...field.RelationField) IDashboardDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dashboardDo) FirstOrInit() (*model.Dashboard, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dashboard), nil
	}
}

func (d dashboardDo) FirstOrCreate() (*model.Dashboard, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dashboard), nil
	}
}

func (d dashboardDo) FindByPage(offset int, limit int) (result []*model.Dashboard, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dashboardDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dashboardDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dashboardDo) Delete(models ...*model.Dashboard) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dashboardDo) withDO(do gen.Dao) *dashboardDo {
	d.DO = *do.(*gen.DO)
	return d
}
