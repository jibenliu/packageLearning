// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm-gen-demo/model"
)

func newAlertSubscribe(db *gorm.DB, opts ...gen.DOOption) alertSubscribe {
	_alertSubscribe := alertSubscribe{}

	_alertSubscribe.alertSubscribeDo.UseDB(db, opts...)
	_alertSubscribe.alertSubscribeDo.UseModel(&model.AlertSubscribe{})

	tableName := _alertSubscribe.alertSubscribeDo.TableName()
	_alertSubscribe.ALL = field.NewAsterisk(tableName)
	_alertSubscribe.ID = field.NewInt64(tableName, "id")
	_alertSubscribe.Name = field.NewString(tableName, "name")
	_alertSubscribe.Disabled = field.NewInt64(tableName, "disabled")
	_alertSubscribe.GroupID = field.NewInt64(tableName, "group_id")
	_alertSubscribe.Prod = field.NewString(tableName, "prod")
	_alertSubscribe.Cate = field.NewString(tableName, "cate")
	_alertSubscribe.DatasourceIds = field.NewString(tableName, "datasource_ids")
	_alertSubscribe.Cluster = field.NewString(tableName, "cluster")
	_alertSubscribe.RuleID = field.NewInt64(tableName, "rule_id")
	_alertSubscribe.Tags = field.NewString(tableName, "tags")
	_alertSubscribe.RedefineSeverity = field.NewInt64(tableName, "redefine_severity")
	_alertSubscribe.NewSeverity = field.NewInt64(tableName, "new_severity")
	_alertSubscribe.RedefineChannels = field.NewInt64(tableName, "redefine_channels")
	_alertSubscribe.NewChannels = field.NewString(tableName, "new_channels")
	_alertSubscribe.UserGroupIds = field.NewString(tableName, "user_group_ids")
	_alertSubscribe.Webhooks = field.NewString(tableName, "webhooks")
	_alertSubscribe.RedefineWebhooks = field.NewInt64(tableName, "redefine_webhooks")
	_alertSubscribe.ForDuration = field.NewInt64(tableName, "for_duration")
	_alertSubscribe.CreateAt = field.NewInt64(tableName, "create_at")
	_alertSubscribe.CreateBy = field.NewString(tableName, "create_by")
	_alertSubscribe.UpdateAt = field.NewInt64(tableName, "update_at")
	_alertSubscribe.UpdateBy = field.NewString(tableName, "update_by")

	_alertSubscribe.fillFieldMap()

	return _alertSubscribe
}

type alertSubscribe struct {
	alertSubscribeDo

	ALL              field.Asterisk
	ID               field.Int64
	Name             field.String
	Disabled         field.Int64 // 0:enabled 1:disabled
	GroupID          field.Int64 // busi group id
	Prod             field.String
	Cate             field.String
	DatasourceIds    field.String // datasource ids
	Cluster          field.String
	RuleID           field.Int64
	Tags             field.String // json,map,tagkey->regexp|value
	RedefineSeverity field.Int64  // is redefine severity?
	NewSeverity      field.Int64  // 0:Emergency 1:Warning 2:Notice
	RedefineChannels field.Int64  // is redefine channels?
	NewChannels      field.String // split by space: sms voice email dingtalk wecom
	UserGroupIds     field.String // split by space 1 34 5, notify cc to user_group_ids
	Webhooks         field.String
	RedefineWebhooks field.Int64
	ForDuration      field.Int64
	CreateAt         field.Int64
	CreateBy         field.String
	UpdateAt         field.Int64
	UpdateBy         field.String

	fieldMap map[string]field.Expr
}

func (a alertSubscribe) Table(newTableName string) *alertSubscribe {
	a.alertSubscribeDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a alertSubscribe) As(alias string) *alertSubscribe {
	a.alertSubscribeDo.DO = *(a.alertSubscribeDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *alertSubscribe) updateTableName(table string) *alertSubscribe {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Name = field.NewString(table, "name")
	a.Disabled = field.NewInt64(table, "disabled")
	a.GroupID = field.NewInt64(table, "group_id")
	a.Prod = field.NewString(table, "prod")
	a.Cate = field.NewString(table, "cate")
	a.DatasourceIds = field.NewString(table, "datasource_ids")
	a.Cluster = field.NewString(table, "cluster")
	a.RuleID = field.NewInt64(table, "rule_id")
	a.Tags = field.NewString(table, "tags")
	a.RedefineSeverity = field.NewInt64(table, "redefine_severity")
	a.NewSeverity = field.NewInt64(table, "new_severity")
	a.RedefineChannels = field.NewInt64(table, "redefine_channels")
	a.NewChannels = field.NewString(table, "new_channels")
	a.UserGroupIds = field.NewString(table, "user_group_ids")
	a.Webhooks = field.NewString(table, "webhooks")
	a.RedefineWebhooks = field.NewInt64(table, "redefine_webhooks")
	a.ForDuration = field.NewInt64(table, "for_duration")
	a.CreateAt = field.NewInt64(table, "create_at")
	a.CreateBy = field.NewString(table, "create_by")
	a.UpdateAt = field.NewInt64(table, "update_at")
	a.UpdateBy = field.NewString(table, "update_by")

	a.fillFieldMap()

	return a
}

func (a *alertSubscribe) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *alertSubscribe) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 22)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
	a.fieldMap["disabled"] = a.Disabled
	a.fieldMap["group_id"] = a.GroupID
	a.fieldMap["prod"] = a.Prod
	a.fieldMap["cate"] = a.Cate
	a.fieldMap["datasource_ids"] = a.DatasourceIds
	a.fieldMap["cluster"] = a.Cluster
	a.fieldMap["rule_id"] = a.RuleID
	a.fieldMap["tags"] = a.Tags
	a.fieldMap["redefine_severity"] = a.RedefineSeverity
	a.fieldMap["new_severity"] = a.NewSeverity
	a.fieldMap["redefine_channels"] = a.RedefineChannels
	a.fieldMap["new_channels"] = a.NewChannels
	a.fieldMap["user_group_ids"] = a.UserGroupIds
	a.fieldMap["webhooks"] = a.Webhooks
	a.fieldMap["redefine_webhooks"] = a.RedefineWebhooks
	a.fieldMap["for_duration"] = a.ForDuration
	a.fieldMap["create_at"] = a.CreateAt
	a.fieldMap["create_by"] = a.CreateBy
	a.fieldMap["update_at"] = a.UpdateAt
	a.fieldMap["update_by"] = a.UpdateBy
}

func (a alertSubscribe) clone(db *gorm.DB) alertSubscribe {
	a.alertSubscribeDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a alertSubscribe) replaceDB(db *gorm.DB) alertSubscribe {
	a.alertSubscribeDo.ReplaceDB(db)
	return a
}

type alertSubscribeDo struct{ gen.DO }

type IAlertSubscribeDo interface {
	gen.SubQuery
	Debug() IAlertSubscribeDo
	WithContext(ctx context.Context) IAlertSubscribeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAlertSubscribeDo
	WriteDB() IAlertSubscribeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAlertSubscribeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAlertSubscribeDo
	Not(conds ...gen.Condition) IAlertSubscribeDo
	Or(conds ...gen.Condition) IAlertSubscribeDo
	Select(conds ...field.Expr) IAlertSubscribeDo
	Where(conds ...gen.Condition) IAlertSubscribeDo
	Order(conds ...field.Expr) IAlertSubscribeDo
	Distinct(cols ...field.Expr) IAlertSubscribeDo
	Omit(cols ...field.Expr) IAlertSubscribeDo
	Join(table schema.Tabler, on ...field.Expr) IAlertSubscribeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAlertSubscribeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAlertSubscribeDo
	Group(cols ...field.Expr) IAlertSubscribeDo
	Having(conds ...gen.Condition) IAlertSubscribeDo
	Limit(limit int) IAlertSubscribeDo
	Offset(offset int) IAlertSubscribeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAlertSubscribeDo
	Unscoped() IAlertSubscribeDo
	Create(values ...*model.AlertSubscribe) error
	CreateInBatches(values []*model.AlertSubscribe, batchSize int) error
	Save(values ...*model.AlertSubscribe) error
	First() (*model.AlertSubscribe, error)
	Take() (*model.AlertSubscribe, error)
	Last() (*model.AlertSubscribe, error)
	Find() ([]*model.AlertSubscribe, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AlertSubscribe, err error)
	FindInBatches(result *[]*model.AlertSubscribe, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AlertSubscribe) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAlertSubscribeDo
	Assign(attrs ...field.AssignExpr) IAlertSubscribeDo
	Joins(fields ...field.RelationField) IAlertSubscribeDo
	Preload(fields ...field.RelationField) IAlertSubscribeDo
	FirstOrInit() (*model.AlertSubscribe, error)
	FirstOrCreate() (*model.AlertSubscribe, error)
	FindByPage(offset int, limit int) (result []*model.AlertSubscribe, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAlertSubscribeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a alertSubscribeDo) Debug() IAlertSubscribeDo {
	return a.withDO(a.DO.Debug())
}

func (a alertSubscribeDo) WithContext(ctx context.Context) IAlertSubscribeDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a alertSubscribeDo) ReadDB() IAlertSubscribeDo {
	return a.Clauses(dbresolver.Read)
}

func (a alertSubscribeDo) WriteDB() IAlertSubscribeDo {
	return a.Clauses(dbresolver.Write)
}

func (a alertSubscribeDo) Session(config *gorm.Session) IAlertSubscribeDo {
	return a.withDO(a.DO.Session(config))
}

func (a alertSubscribeDo) Clauses(conds ...clause.Expression) IAlertSubscribeDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a alertSubscribeDo) Returning(value interface{}, columns ...string) IAlertSubscribeDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a alertSubscribeDo) Not(conds ...gen.Condition) IAlertSubscribeDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a alertSubscribeDo) Or(conds ...gen.Condition) IAlertSubscribeDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a alertSubscribeDo) Select(conds ...field.Expr) IAlertSubscribeDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a alertSubscribeDo) Where(conds ...gen.Condition) IAlertSubscribeDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a alertSubscribeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAlertSubscribeDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a alertSubscribeDo) Order(conds ...field.Expr) IAlertSubscribeDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a alertSubscribeDo) Distinct(cols ...field.Expr) IAlertSubscribeDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a alertSubscribeDo) Omit(cols ...field.Expr) IAlertSubscribeDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a alertSubscribeDo) Join(table schema.Tabler, on ...field.Expr) IAlertSubscribeDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a alertSubscribeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAlertSubscribeDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a alertSubscribeDo) RightJoin(table schema.Tabler, on ...field.Expr) IAlertSubscribeDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a alertSubscribeDo) Group(cols ...field.Expr) IAlertSubscribeDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a alertSubscribeDo) Having(conds ...gen.Condition) IAlertSubscribeDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a alertSubscribeDo) Limit(limit int) IAlertSubscribeDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a alertSubscribeDo) Offset(offset int) IAlertSubscribeDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a alertSubscribeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAlertSubscribeDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a alertSubscribeDo) Unscoped() IAlertSubscribeDo {
	return a.withDO(a.DO.Unscoped())
}

func (a alertSubscribeDo) Create(values ...*model.AlertSubscribe) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a alertSubscribeDo) CreateInBatches(values []*model.AlertSubscribe, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a alertSubscribeDo) Save(values ...*model.AlertSubscribe) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a alertSubscribeDo) First() (*model.AlertSubscribe, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlertSubscribe), nil
	}
}

func (a alertSubscribeDo) Take() (*model.AlertSubscribe, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlertSubscribe), nil
	}
}

func (a alertSubscribeDo) Last() (*model.AlertSubscribe, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlertSubscribe), nil
	}
}

func (a alertSubscribeDo) Find() ([]*model.AlertSubscribe, error) {
	result, err := a.DO.Find()
	return result.([]*model.AlertSubscribe), err
}

func (a alertSubscribeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AlertSubscribe, err error) {
	buf := make([]*model.AlertSubscribe, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a alertSubscribeDo) FindInBatches(result *[]*model.AlertSubscribe, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a alertSubscribeDo) Attrs(attrs ...field.AssignExpr) IAlertSubscribeDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a alertSubscribeDo) Assign(attrs ...field.AssignExpr) IAlertSubscribeDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a alertSubscribeDo) Joins(fields ...field.RelationField) IAlertSubscribeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a alertSubscribeDo) Preload(fields ...field.RelationField) IAlertSubscribeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a alertSubscribeDo) FirstOrInit() (*model.AlertSubscribe, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlertSubscribe), nil
	}
}

func (a alertSubscribeDo) FirstOrCreate() (*model.AlertSubscribe, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlertSubscribe), nil
	}
}

func (a alertSubscribeDo) FindByPage(offset int, limit int) (result []*model.AlertSubscribe, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a alertSubscribeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a alertSubscribeDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a alertSubscribeDo) Delete(models ...*model.AlertSubscribe) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *alertSubscribeDo) withDO(do gen.Dao) *alertSubscribeDo {
	a.DO = *do.(*gen.DO)
	return a
}
