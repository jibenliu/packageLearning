// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm-gen-demo/model"
)

func newChartGroup(db *gorm.DB, opts ...gen.DOOption) chartGroup {
	_chartGroup := chartGroup{}

	_chartGroup.chartGroupDo.UseDB(db, opts...)
	_chartGroup.chartGroupDo.UseModel(&model.ChartGroup{})

	tableName := _chartGroup.chartGroupDo.TableName()
	_chartGroup.ALL = field.NewAsterisk(tableName)
	_chartGroup.ID = field.NewInt64(tableName, "id")
	_chartGroup.DashboardID = field.NewInt64(tableName, "dashboard_id")
	_chartGroup.Name = field.NewString(tableName, "name")
	_chartGroup.Weight = field.NewInt64(tableName, "weight")

	_chartGroup.fillFieldMap()

	return _chartGroup
}

type chartGroup struct {
	chartGroupDo

	ALL         field.Asterisk
	ID          field.Int64
	DashboardID field.Int64
	Name        field.String
	Weight      field.Int64

	fieldMap map[string]field.Expr
}

func (c chartGroup) Table(newTableName string) *chartGroup {
	c.chartGroupDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c chartGroup) As(alias string) *chartGroup {
	c.chartGroupDo.DO = *(c.chartGroupDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *chartGroup) updateTableName(table string) *chartGroup {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.DashboardID = field.NewInt64(table, "dashboard_id")
	c.Name = field.NewString(table, "name")
	c.Weight = field.NewInt64(table, "weight")

	c.fillFieldMap()

	return c
}

func (c *chartGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *chartGroup) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 4)
	c.fieldMap["id"] = c.ID
	c.fieldMap["dashboard_id"] = c.DashboardID
	c.fieldMap["name"] = c.Name
	c.fieldMap["weight"] = c.Weight
}

func (c chartGroup) clone(db *gorm.DB) chartGroup {
	c.chartGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c chartGroup) replaceDB(db *gorm.DB) chartGroup {
	c.chartGroupDo.ReplaceDB(db)
	return c
}

type chartGroupDo struct{ gen.DO }

type IChartGroupDo interface {
	gen.SubQuery
	Debug() IChartGroupDo
	WithContext(ctx context.Context) IChartGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IChartGroupDo
	WriteDB() IChartGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IChartGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IChartGroupDo
	Not(conds ...gen.Condition) IChartGroupDo
	Or(conds ...gen.Condition) IChartGroupDo
	Select(conds ...field.Expr) IChartGroupDo
	Where(conds ...gen.Condition) IChartGroupDo
	Order(conds ...field.Expr) IChartGroupDo
	Distinct(cols ...field.Expr) IChartGroupDo
	Omit(cols ...field.Expr) IChartGroupDo
	Join(table schema.Tabler, on ...field.Expr) IChartGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IChartGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IChartGroupDo
	Group(cols ...field.Expr) IChartGroupDo
	Having(conds ...gen.Condition) IChartGroupDo
	Limit(limit int) IChartGroupDo
	Offset(offset int) IChartGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IChartGroupDo
	Unscoped() IChartGroupDo
	Create(values ...*model.ChartGroup) error
	CreateInBatches(values []*model.ChartGroup, batchSize int) error
	Save(values ...*model.ChartGroup) error
	First() (*model.ChartGroup, error)
	Take() (*model.ChartGroup, error)
	Last() (*model.ChartGroup, error)
	Find() ([]*model.ChartGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ChartGroup, err error)
	FindInBatches(result *[]*model.ChartGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ChartGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IChartGroupDo
	Assign(attrs ...field.AssignExpr) IChartGroupDo
	Joins(fields ...field.RelationField) IChartGroupDo
	Preload(fields ...field.RelationField) IChartGroupDo
	FirstOrInit() (*model.ChartGroup, error)
	FirstOrCreate() (*model.ChartGroup, error)
	FindByPage(offset int, limit int) (result []*model.ChartGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IChartGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c chartGroupDo) Debug() IChartGroupDo {
	return c.withDO(c.DO.Debug())
}

func (c chartGroupDo) WithContext(ctx context.Context) IChartGroupDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c chartGroupDo) ReadDB() IChartGroupDo {
	return c.Clauses(dbresolver.Read)
}

func (c chartGroupDo) WriteDB() IChartGroupDo {
	return c.Clauses(dbresolver.Write)
}

func (c chartGroupDo) Session(config *gorm.Session) IChartGroupDo {
	return c.withDO(c.DO.Session(config))
}

func (c chartGroupDo) Clauses(conds ...clause.Expression) IChartGroupDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c chartGroupDo) Returning(value interface{}, columns ...string) IChartGroupDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c chartGroupDo) Not(conds ...gen.Condition) IChartGroupDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c chartGroupDo) Or(conds ...gen.Condition) IChartGroupDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c chartGroupDo) Select(conds ...field.Expr) IChartGroupDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c chartGroupDo) Where(conds ...gen.Condition) IChartGroupDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c chartGroupDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IChartGroupDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c chartGroupDo) Order(conds ...field.Expr) IChartGroupDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c chartGroupDo) Distinct(cols ...field.Expr) IChartGroupDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c chartGroupDo) Omit(cols ...field.Expr) IChartGroupDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c chartGroupDo) Join(table schema.Tabler, on ...field.Expr) IChartGroupDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c chartGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IChartGroupDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c chartGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IChartGroupDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c chartGroupDo) Group(cols ...field.Expr) IChartGroupDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c chartGroupDo) Having(conds ...gen.Condition) IChartGroupDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c chartGroupDo) Limit(limit int) IChartGroupDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c chartGroupDo) Offset(offset int) IChartGroupDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c chartGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IChartGroupDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c chartGroupDo) Unscoped() IChartGroupDo {
	return c.withDO(c.DO.Unscoped())
}

func (c chartGroupDo) Create(values ...*model.ChartGroup) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c chartGroupDo) CreateInBatches(values []*model.ChartGroup, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c chartGroupDo) Save(values ...*model.ChartGroup) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c chartGroupDo) First() (*model.ChartGroup, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChartGroup), nil
	}
}

func (c chartGroupDo) Take() (*model.ChartGroup, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChartGroup), nil
	}
}

func (c chartGroupDo) Last() (*model.ChartGroup, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChartGroup), nil
	}
}

func (c chartGroupDo) Find() ([]*model.ChartGroup, error) {
	result, err := c.DO.Find()
	return result.([]*model.ChartGroup), err
}

func (c chartGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ChartGroup, err error) {
	buf := make([]*model.ChartGroup, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c chartGroupDo) FindInBatches(result *[]*model.ChartGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c chartGroupDo) Attrs(attrs ...field.AssignExpr) IChartGroupDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c chartGroupDo) Assign(attrs ...field.AssignExpr) IChartGroupDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c chartGroupDo) Joins(fields ...field.RelationField) IChartGroupDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c chartGroupDo) Preload(fields ...field.RelationField) IChartGroupDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c chartGroupDo) FirstOrInit() (*model.ChartGroup, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChartGroup), nil
	}
}

func (c chartGroupDo) FirstOrCreate() (*model.ChartGroup, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChartGroup), nil
	}
}

func (c chartGroupDo) FindByPage(offset int, limit int) (result []*model.ChartGroup, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c chartGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c chartGroupDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c chartGroupDo) Delete(models ...*model.ChartGroup) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *chartGroupDo) withDO(do gen.Dao) *chartGroupDo {
	c.DO = *do.(*gen.DO)
	return c
}
