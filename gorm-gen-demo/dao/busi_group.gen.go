// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm-gen-demo/model"
)

func newBusiGroup(db *gorm.DB, opts ...gen.DOOption) busiGroup {
	_busiGroup := busiGroup{}

	_busiGroup.busiGroupDo.UseDB(db, opts...)
	_busiGroup.busiGroupDo.UseModel(&model.BusiGroup{})

	tableName := _busiGroup.busiGroupDo.TableName()
	_busiGroup.ALL = field.NewAsterisk(tableName)
	_busiGroup.ID = field.NewInt64(tableName, "id")
	_busiGroup.Name = field.NewString(tableName, "name")
	_busiGroup.LabelEnable = field.NewInt64(tableName, "label_enable")
	_busiGroup.LabelValue = field.NewString(tableName, "label_value")
	_busiGroup.CreateAt = field.NewInt64(tableName, "create_at")
	_busiGroup.CreateBy = field.NewString(tableName, "create_by")
	_busiGroup.UpdateAt = field.NewInt64(tableName, "update_at")
	_busiGroup.UpdateBy = field.NewString(tableName, "update_by")

	_busiGroup.fillFieldMap()

	return _busiGroup
}

type busiGroup struct {
	busiGroupDo

	ALL         field.Asterisk
	ID          field.Int64
	Name        field.String
	LabelEnable field.Int64
	LabelValue  field.String // if label_enable: label_value can not be blank
	CreateAt    field.Int64
	CreateBy    field.String
	UpdateAt    field.Int64
	UpdateBy    field.String

	fieldMap map[string]field.Expr
}

func (b busiGroup) Table(newTableName string) *busiGroup {
	b.busiGroupDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b busiGroup) As(alias string) *busiGroup {
	b.busiGroupDo.DO = *(b.busiGroupDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *busiGroup) updateTableName(table string) *busiGroup {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt64(table, "id")
	b.Name = field.NewString(table, "name")
	b.LabelEnable = field.NewInt64(table, "label_enable")
	b.LabelValue = field.NewString(table, "label_value")
	b.CreateAt = field.NewInt64(table, "create_at")
	b.CreateBy = field.NewString(table, "create_by")
	b.UpdateAt = field.NewInt64(table, "update_at")
	b.UpdateBy = field.NewString(table, "update_by")

	b.fillFieldMap()

	return b
}

func (b *busiGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *busiGroup) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 8)
	b.fieldMap["id"] = b.ID
	b.fieldMap["name"] = b.Name
	b.fieldMap["label_enable"] = b.LabelEnable
	b.fieldMap["label_value"] = b.LabelValue
	b.fieldMap["create_at"] = b.CreateAt
	b.fieldMap["create_by"] = b.CreateBy
	b.fieldMap["update_at"] = b.UpdateAt
	b.fieldMap["update_by"] = b.UpdateBy
}

func (b busiGroup) clone(db *gorm.DB) busiGroup {
	b.busiGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b busiGroup) replaceDB(db *gorm.DB) busiGroup {
	b.busiGroupDo.ReplaceDB(db)
	return b
}

type busiGroupDo struct{ gen.DO }

type IBusiGroupDo interface {
	gen.SubQuery
	Debug() IBusiGroupDo
	WithContext(ctx context.Context) IBusiGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBusiGroupDo
	WriteDB() IBusiGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBusiGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBusiGroupDo
	Not(conds ...gen.Condition) IBusiGroupDo
	Or(conds ...gen.Condition) IBusiGroupDo
	Select(conds ...field.Expr) IBusiGroupDo
	Where(conds ...gen.Condition) IBusiGroupDo
	Order(conds ...field.Expr) IBusiGroupDo
	Distinct(cols ...field.Expr) IBusiGroupDo
	Omit(cols ...field.Expr) IBusiGroupDo
	Join(table schema.Tabler, on ...field.Expr) IBusiGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBusiGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBusiGroupDo
	Group(cols ...field.Expr) IBusiGroupDo
	Having(conds ...gen.Condition) IBusiGroupDo
	Limit(limit int) IBusiGroupDo
	Offset(offset int) IBusiGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBusiGroupDo
	Unscoped() IBusiGroupDo
	Create(values ...*model.BusiGroup) error
	CreateInBatches(values []*model.BusiGroup, batchSize int) error
	Save(values ...*model.BusiGroup) error
	First() (*model.BusiGroup, error)
	Take() (*model.BusiGroup, error)
	Last() (*model.BusiGroup, error)
	Find() ([]*model.BusiGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BusiGroup, err error)
	FindInBatches(result *[]*model.BusiGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BusiGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBusiGroupDo
	Assign(attrs ...field.AssignExpr) IBusiGroupDo
	Joins(fields ...field.RelationField) IBusiGroupDo
	Preload(fields ...field.RelationField) IBusiGroupDo
	FirstOrInit() (*model.BusiGroup, error)
	FirstOrCreate() (*model.BusiGroup, error)
	FindByPage(offset int, limit int) (result []*model.BusiGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBusiGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b busiGroupDo) Debug() IBusiGroupDo {
	return b.withDO(b.DO.Debug())
}

func (b busiGroupDo) WithContext(ctx context.Context) IBusiGroupDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b busiGroupDo) ReadDB() IBusiGroupDo {
	return b.Clauses(dbresolver.Read)
}

func (b busiGroupDo) WriteDB() IBusiGroupDo {
	return b.Clauses(dbresolver.Write)
}

func (b busiGroupDo) Session(config *gorm.Session) IBusiGroupDo {
	return b.withDO(b.DO.Session(config))
}

func (b busiGroupDo) Clauses(conds ...clause.Expression) IBusiGroupDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b busiGroupDo) Returning(value interface{}, columns ...string) IBusiGroupDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b busiGroupDo) Not(conds ...gen.Condition) IBusiGroupDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b busiGroupDo) Or(conds ...gen.Condition) IBusiGroupDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b busiGroupDo) Select(conds ...field.Expr) IBusiGroupDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b busiGroupDo) Where(conds ...gen.Condition) IBusiGroupDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b busiGroupDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IBusiGroupDo {
	return b.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (b busiGroupDo) Order(conds ...field.Expr) IBusiGroupDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b busiGroupDo) Distinct(cols ...field.Expr) IBusiGroupDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b busiGroupDo) Omit(cols ...field.Expr) IBusiGroupDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b busiGroupDo) Join(table schema.Tabler, on ...field.Expr) IBusiGroupDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b busiGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBusiGroupDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b busiGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IBusiGroupDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b busiGroupDo) Group(cols ...field.Expr) IBusiGroupDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b busiGroupDo) Having(conds ...gen.Condition) IBusiGroupDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b busiGroupDo) Limit(limit int) IBusiGroupDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b busiGroupDo) Offset(offset int) IBusiGroupDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b busiGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBusiGroupDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b busiGroupDo) Unscoped() IBusiGroupDo {
	return b.withDO(b.DO.Unscoped())
}

func (b busiGroupDo) Create(values ...*model.BusiGroup) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b busiGroupDo) CreateInBatches(values []*model.BusiGroup, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b busiGroupDo) Save(values ...*model.BusiGroup) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b busiGroupDo) First() (*model.BusiGroup, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BusiGroup), nil
	}
}

func (b busiGroupDo) Take() (*model.BusiGroup, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BusiGroup), nil
	}
}

func (b busiGroupDo) Last() (*model.BusiGroup, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BusiGroup), nil
	}
}

func (b busiGroupDo) Find() ([]*model.BusiGroup, error) {
	result, err := b.DO.Find()
	return result.([]*model.BusiGroup), err
}

func (b busiGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BusiGroup, err error) {
	buf := make([]*model.BusiGroup, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b busiGroupDo) FindInBatches(result *[]*model.BusiGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b busiGroupDo) Attrs(attrs ...field.AssignExpr) IBusiGroupDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b busiGroupDo) Assign(attrs ...field.AssignExpr) IBusiGroupDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b busiGroupDo) Joins(fields ...field.RelationField) IBusiGroupDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b busiGroupDo) Preload(fields ...field.RelationField) IBusiGroupDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b busiGroupDo) FirstOrInit() (*model.BusiGroup, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BusiGroup), nil
	}
}

func (b busiGroupDo) FirstOrCreate() (*model.BusiGroup, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BusiGroup), nil
	}
}

func (b busiGroupDo) FindByPage(offset int, limit int) (result []*model.BusiGroup, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b busiGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b busiGroupDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b busiGroupDo) Delete(models ...*model.BusiGroup) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *busiGroupDo) withDO(do gen.Dao) *busiGroupDo {
	b.DO = *do.(*gen.DO)
	return b
}
