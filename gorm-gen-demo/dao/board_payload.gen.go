// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm-gen-demo/model"
)

func newBoardPayload(db *gorm.DB, opts ...gen.DOOption) boardPayload {
	_boardPayload := boardPayload{}

	_boardPayload.boardPayloadDo.UseDB(db, opts...)
	_boardPayload.boardPayloadDo.UseModel(&model.BoardPayload{})

	tableName := _boardPayload.boardPayloadDo.TableName()
	_boardPayload.ALL = field.NewAsterisk(tableName)
	_boardPayload.ID = field.NewInt64(tableName, "id")
	_boardPayload.Payload = field.NewString(tableName, "payload")

	_boardPayload.fillFieldMap()

	return _boardPayload
}

type boardPayload struct {
	boardPayloadDo

	ALL     field.Asterisk
	ID      field.Int64 // dashboard id
	Payload field.String

	fieldMap map[string]field.Expr
}

func (b boardPayload) Table(newTableName string) *boardPayload {
	b.boardPayloadDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b boardPayload) As(alias string) *boardPayload {
	b.boardPayloadDo.DO = *(b.boardPayloadDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *boardPayload) updateTableName(table string) *boardPayload {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt64(table, "id")
	b.Payload = field.NewString(table, "payload")

	b.fillFieldMap()

	return b
}

func (b *boardPayload) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *boardPayload) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 2)
	b.fieldMap["id"] = b.ID
	b.fieldMap["payload"] = b.Payload
}

func (b boardPayload) clone(db *gorm.DB) boardPayload {
	b.boardPayloadDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b boardPayload) replaceDB(db *gorm.DB) boardPayload {
	b.boardPayloadDo.ReplaceDB(db)
	return b
}

type boardPayloadDo struct{ gen.DO }

type IBoardPayloadDo interface {
	gen.SubQuery
	Debug() IBoardPayloadDo
	WithContext(ctx context.Context) IBoardPayloadDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBoardPayloadDo
	WriteDB() IBoardPayloadDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBoardPayloadDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBoardPayloadDo
	Not(conds ...gen.Condition) IBoardPayloadDo
	Or(conds ...gen.Condition) IBoardPayloadDo
	Select(conds ...field.Expr) IBoardPayloadDo
	Where(conds ...gen.Condition) IBoardPayloadDo
	Order(conds ...field.Expr) IBoardPayloadDo
	Distinct(cols ...field.Expr) IBoardPayloadDo
	Omit(cols ...field.Expr) IBoardPayloadDo
	Join(table schema.Tabler, on ...field.Expr) IBoardPayloadDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBoardPayloadDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBoardPayloadDo
	Group(cols ...field.Expr) IBoardPayloadDo
	Having(conds ...gen.Condition) IBoardPayloadDo
	Limit(limit int) IBoardPayloadDo
	Offset(offset int) IBoardPayloadDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBoardPayloadDo
	Unscoped() IBoardPayloadDo
	Create(values ...*model.BoardPayload) error
	CreateInBatches(values []*model.BoardPayload, batchSize int) error
	Save(values ...*model.BoardPayload) error
	First() (*model.BoardPayload, error)
	Take() (*model.BoardPayload, error)
	Last() (*model.BoardPayload, error)
	Find() ([]*model.BoardPayload, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BoardPayload, err error)
	FindInBatches(result *[]*model.BoardPayload, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BoardPayload) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBoardPayloadDo
	Assign(attrs ...field.AssignExpr) IBoardPayloadDo
	Joins(fields ...field.RelationField) IBoardPayloadDo
	Preload(fields ...field.RelationField) IBoardPayloadDo
	FirstOrInit() (*model.BoardPayload, error)
	FirstOrCreate() (*model.BoardPayload, error)
	FindByPage(offset int, limit int) (result []*model.BoardPayload, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBoardPayloadDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b boardPayloadDo) Debug() IBoardPayloadDo {
	return b.withDO(b.DO.Debug())
}

func (b boardPayloadDo) WithContext(ctx context.Context) IBoardPayloadDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b boardPayloadDo) ReadDB() IBoardPayloadDo {
	return b.Clauses(dbresolver.Read)
}

func (b boardPayloadDo) WriteDB() IBoardPayloadDo {
	return b.Clauses(dbresolver.Write)
}

func (b boardPayloadDo) Session(config *gorm.Session) IBoardPayloadDo {
	return b.withDO(b.DO.Session(config))
}

func (b boardPayloadDo) Clauses(conds ...clause.Expression) IBoardPayloadDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b boardPayloadDo) Returning(value interface{}, columns ...string) IBoardPayloadDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b boardPayloadDo) Not(conds ...gen.Condition) IBoardPayloadDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b boardPayloadDo) Or(conds ...gen.Condition) IBoardPayloadDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b boardPayloadDo) Select(conds ...field.Expr) IBoardPayloadDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b boardPayloadDo) Where(conds ...gen.Condition) IBoardPayloadDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b boardPayloadDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IBoardPayloadDo {
	return b.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (b boardPayloadDo) Order(conds ...field.Expr) IBoardPayloadDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b boardPayloadDo) Distinct(cols ...field.Expr) IBoardPayloadDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b boardPayloadDo) Omit(cols ...field.Expr) IBoardPayloadDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b boardPayloadDo) Join(table schema.Tabler, on ...field.Expr) IBoardPayloadDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b boardPayloadDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBoardPayloadDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b boardPayloadDo) RightJoin(table schema.Tabler, on ...field.Expr) IBoardPayloadDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b boardPayloadDo) Group(cols ...field.Expr) IBoardPayloadDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b boardPayloadDo) Having(conds ...gen.Condition) IBoardPayloadDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b boardPayloadDo) Limit(limit int) IBoardPayloadDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b boardPayloadDo) Offset(offset int) IBoardPayloadDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b boardPayloadDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBoardPayloadDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b boardPayloadDo) Unscoped() IBoardPayloadDo {
	return b.withDO(b.DO.Unscoped())
}

func (b boardPayloadDo) Create(values ...*model.BoardPayload) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b boardPayloadDo) CreateInBatches(values []*model.BoardPayload, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b boardPayloadDo) Save(values ...*model.BoardPayload) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b boardPayloadDo) First() (*model.BoardPayload, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BoardPayload), nil
	}
}

func (b boardPayloadDo) Take() (*model.BoardPayload, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BoardPayload), nil
	}
}

func (b boardPayloadDo) Last() (*model.BoardPayload, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BoardPayload), nil
	}
}

func (b boardPayloadDo) Find() ([]*model.BoardPayload, error) {
	result, err := b.DO.Find()
	return result.([]*model.BoardPayload), err
}

func (b boardPayloadDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BoardPayload, err error) {
	buf := make([]*model.BoardPayload, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b boardPayloadDo) FindInBatches(result *[]*model.BoardPayload, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b boardPayloadDo) Attrs(attrs ...field.AssignExpr) IBoardPayloadDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b boardPayloadDo) Assign(attrs ...field.AssignExpr) IBoardPayloadDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b boardPayloadDo) Joins(fields ...field.RelationField) IBoardPayloadDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b boardPayloadDo) Preload(fields ...field.RelationField) IBoardPayloadDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b boardPayloadDo) FirstOrInit() (*model.BoardPayload, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BoardPayload), nil
	}
}

func (b boardPayloadDo) FirstOrCreate() (*model.BoardPayload, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BoardPayload), nil
	}
}

func (b boardPayloadDo) FindByPage(offset int, limit int) (result []*model.BoardPayload, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b boardPayloadDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b boardPayloadDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b boardPayloadDo) Delete(models ...*model.BoardPayload) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *boardPayloadDo) withDO(do gen.Dao) *boardPayloadDo {
	b.DO = *do.(*gen.DO)
	return b
}
