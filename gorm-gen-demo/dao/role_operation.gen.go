// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm-gen-demo/model"
)

func newRoleOperation(db *gorm.DB, opts ...gen.DOOption) roleOperation {
	_roleOperation := roleOperation{}

	_roleOperation.roleOperationDo.UseDB(db, opts...)
	_roleOperation.roleOperationDo.UseModel(&model.RoleOperation{})

	tableName := _roleOperation.roleOperationDo.TableName()
	_roleOperation.ALL = field.NewAsterisk(tableName)
	_roleOperation.ID = field.NewInt64(tableName, "id")
	_roleOperation.RoleName = field.NewString(tableName, "role_name")
	_roleOperation.Operation = field.NewString(tableName, "operation")

	_roleOperation.fillFieldMap()

	return _roleOperation
}

type roleOperation struct {
	roleOperationDo

	ALL       field.Asterisk
	ID        field.Int64
	RoleName  field.String
	Operation field.String

	fieldMap map[string]field.Expr
}

func (r roleOperation) Table(newTableName string) *roleOperation {
	r.roleOperationDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r roleOperation) As(alias string) *roleOperation {
	r.roleOperationDo.DO = *(r.roleOperationDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *roleOperation) updateTableName(table string) *roleOperation {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.RoleName = field.NewString(table, "role_name")
	r.Operation = field.NewString(table, "operation")

	r.fillFieldMap()

	return r
}

func (r *roleOperation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *roleOperation) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 3)
	r.fieldMap["id"] = r.ID
	r.fieldMap["role_name"] = r.RoleName
	r.fieldMap["operation"] = r.Operation
}

func (r roleOperation) clone(db *gorm.DB) roleOperation {
	r.roleOperationDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r roleOperation) replaceDB(db *gorm.DB) roleOperation {
	r.roleOperationDo.ReplaceDB(db)
	return r
}

type roleOperationDo struct{ gen.DO }

type IRoleOperationDo interface {
	gen.SubQuery
	Debug() IRoleOperationDo
	WithContext(ctx context.Context) IRoleOperationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRoleOperationDo
	WriteDB() IRoleOperationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRoleOperationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRoleOperationDo
	Not(conds ...gen.Condition) IRoleOperationDo
	Or(conds ...gen.Condition) IRoleOperationDo
	Select(conds ...field.Expr) IRoleOperationDo
	Where(conds ...gen.Condition) IRoleOperationDo
	Order(conds ...field.Expr) IRoleOperationDo
	Distinct(cols ...field.Expr) IRoleOperationDo
	Omit(cols ...field.Expr) IRoleOperationDo
	Join(table schema.Tabler, on ...field.Expr) IRoleOperationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRoleOperationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRoleOperationDo
	Group(cols ...field.Expr) IRoleOperationDo
	Having(conds ...gen.Condition) IRoleOperationDo
	Limit(limit int) IRoleOperationDo
	Offset(offset int) IRoleOperationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRoleOperationDo
	Unscoped() IRoleOperationDo
	Create(values ...*model.RoleOperation) error
	CreateInBatches(values []*model.RoleOperation, batchSize int) error
	Save(values ...*model.RoleOperation) error
	First() (*model.RoleOperation, error)
	Take() (*model.RoleOperation, error)
	Last() (*model.RoleOperation, error)
	Find() ([]*model.RoleOperation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RoleOperation, err error)
	FindInBatches(result *[]*model.RoleOperation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RoleOperation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRoleOperationDo
	Assign(attrs ...field.AssignExpr) IRoleOperationDo
	Joins(fields ...field.RelationField) IRoleOperationDo
	Preload(fields ...field.RelationField) IRoleOperationDo
	FirstOrInit() (*model.RoleOperation, error)
	FirstOrCreate() (*model.RoleOperation, error)
	FindByPage(offset int, limit int) (result []*model.RoleOperation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRoleOperationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r roleOperationDo) Debug() IRoleOperationDo {
	return r.withDO(r.DO.Debug())
}

func (r roleOperationDo) WithContext(ctx context.Context) IRoleOperationDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r roleOperationDo) ReadDB() IRoleOperationDo {
	return r.Clauses(dbresolver.Read)
}

func (r roleOperationDo) WriteDB() IRoleOperationDo {
	return r.Clauses(dbresolver.Write)
}

func (r roleOperationDo) Session(config *gorm.Session) IRoleOperationDo {
	return r.withDO(r.DO.Session(config))
}

func (r roleOperationDo) Clauses(conds ...clause.Expression) IRoleOperationDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r roleOperationDo) Returning(value interface{}, columns ...string) IRoleOperationDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r roleOperationDo) Not(conds ...gen.Condition) IRoleOperationDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r roleOperationDo) Or(conds ...gen.Condition) IRoleOperationDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r roleOperationDo) Select(conds ...field.Expr) IRoleOperationDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r roleOperationDo) Where(conds ...gen.Condition) IRoleOperationDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r roleOperationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IRoleOperationDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r roleOperationDo) Order(conds ...field.Expr) IRoleOperationDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r roleOperationDo) Distinct(cols ...field.Expr) IRoleOperationDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r roleOperationDo) Omit(cols ...field.Expr) IRoleOperationDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r roleOperationDo) Join(table schema.Tabler, on ...field.Expr) IRoleOperationDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r roleOperationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRoleOperationDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r roleOperationDo) RightJoin(table schema.Tabler, on ...field.Expr) IRoleOperationDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r roleOperationDo) Group(cols ...field.Expr) IRoleOperationDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r roleOperationDo) Having(conds ...gen.Condition) IRoleOperationDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r roleOperationDo) Limit(limit int) IRoleOperationDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r roleOperationDo) Offset(offset int) IRoleOperationDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r roleOperationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRoleOperationDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r roleOperationDo) Unscoped() IRoleOperationDo {
	return r.withDO(r.DO.Unscoped())
}

func (r roleOperationDo) Create(values ...*model.RoleOperation) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r roleOperationDo) CreateInBatches(values []*model.RoleOperation, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r roleOperationDo) Save(values ...*model.RoleOperation) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r roleOperationDo) First() (*model.RoleOperation, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleOperation), nil
	}
}

func (r roleOperationDo) Take() (*model.RoleOperation, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleOperation), nil
	}
}

func (r roleOperationDo) Last() (*model.RoleOperation, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleOperation), nil
	}
}

func (r roleOperationDo) Find() ([]*model.RoleOperation, error) {
	result, err := r.DO.Find()
	return result.([]*model.RoleOperation), err
}

func (r roleOperationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RoleOperation, err error) {
	buf := make([]*model.RoleOperation, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r roleOperationDo) FindInBatches(result *[]*model.RoleOperation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r roleOperationDo) Attrs(attrs ...field.AssignExpr) IRoleOperationDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r roleOperationDo) Assign(attrs ...field.AssignExpr) IRoleOperationDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r roleOperationDo) Joins(fields ...field.RelationField) IRoleOperationDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r roleOperationDo) Preload(fields ...field.RelationField) IRoleOperationDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r roleOperationDo) FirstOrInit() (*model.RoleOperation, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleOperation), nil
	}
}

func (r roleOperationDo) FirstOrCreate() (*model.RoleOperation, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleOperation), nil
	}
}

func (r roleOperationDo) FindByPage(offset int, limit int) (result []*model.RoleOperation, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r roleOperationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r roleOperationDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r roleOperationDo) Delete(models ...*model.RoleOperation) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *roleOperationDo) withDO(do gen.Dao) *roleOperationDo {
	r.DO = *do.(*gen.DO)
	return r
}
