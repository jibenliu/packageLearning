// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm-gen-demo/model"
)

func newRecordingRule(db *gorm.DB, opts ...gen.DOOption) recordingRule {
	_recordingRule := recordingRule{}

	_recordingRule.recordingRuleDo.UseDB(db, opts...)
	_recordingRule.recordingRuleDo.UseModel(&model.RecordingRule{})

	tableName := _recordingRule.recordingRuleDo.TableName()
	_recordingRule.ALL = field.NewAsterisk(tableName)
	_recordingRule.ID = field.NewInt64(tableName, "id")
	_recordingRule.GroupID = field.NewInt64(tableName, "group_id")
	_recordingRule.DatasourceIds = field.NewString(tableName, "datasource_ids")
	_recordingRule.Cluster = field.NewString(tableName, "cluster")
	_recordingRule.Name = field.NewString(tableName, "name")
	_recordingRule.Note = field.NewString(tableName, "note")
	_recordingRule.Disabled = field.NewInt64(tableName, "disabled")
	_recordingRule.PromQl = field.NewString(tableName, "prom_ql")
	_recordingRule.PromEvalInterval = field.NewInt64(tableName, "prom_eval_interval")
	_recordingRule.AppendTags = field.NewString(tableName, "append_tags")
	_recordingRule.CreateAt = field.NewInt64(tableName, "create_at")
	_recordingRule.CreateBy = field.NewString(tableName, "create_by")
	_recordingRule.UpdateAt = field.NewInt64(tableName, "update_at")
	_recordingRule.UpdateBy = field.NewString(tableName, "update_by")

	_recordingRule.fillFieldMap()

	return _recordingRule
}

type recordingRule struct {
	recordingRuleDo

	ALL              field.Asterisk
	ID               field.Int64
	GroupID          field.Int64  // group_id
	DatasourceIds    field.String // datasource ids
	Cluster          field.String
	Name             field.String // new metric name
	Note             field.String // rule note
	Disabled         field.Int64  // 0:enabled 1:disabled
	PromQl           field.String // promql
	PromEvalInterval field.Int64  // evaluate interval
	AppendTags       field.String // split by space: service=n9e mod=api
	CreateAt         field.Int64
	CreateBy         field.String
	UpdateAt         field.Int64
	UpdateBy         field.String

	fieldMap map[string]field.Expr
}

func (r recordingRule) Table(newTableName string) *recordingRule {
	r.recordingRuleDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r recordingRule) As(alias string) *recordingRule {
	r.recordingRuleDo.DO = *(r.recordingRuleDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *recordingRule) updateTableName(table string) *recordingRule {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.GroupID = field.NewInt64(table, "group_id")
	r.DatasourceIds = field.NewString(table, "datasource_ids")
	r.Cluster = field.NewString(table, "cluster")
	r.Name = field.NewString(table, "name")
	r.Note = field.NewString(table, "note")
	r.Disabled = field.NewInt64(table, "disabled")
	r.PromQl = field.NewString(table, "prom_ql")
	r.PromEvalInterval = field.NewInt64(table, "prom_eval_interval")
	r.AppendTags = field.NewString(table, "append_tags")
	r.CreateAt = field.NewInt64(table, "create_at")
	r.CreateBy = field.NewString(table, "create_by")
	r.UpdateAt = field.NewInt64(table, "update_at")
	r.UpdateBy = field.NewString(table, "update_by")

	r.fillFieldMap()

	return r
}

func (r *recordingRule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *recordingRule) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 14)
	r.fieldMap["id"] = r.ID
	r.fieldMap["group_id"] = r.GroupID
	r.fieldMap["datasource_ids"] = r.DatasourceIds
	r.fieldMap["cluster"] = r.Cluster
	r.fieldMap["name"] = r.Name
	r.fieldMap["note"] = r.Note
	r.fieldMap["disabled"] = r.Disabled
	r.fieldMap["prom_ql"] = r.PromQl
	r.fieldMap["prom_eval_interval"] = r.PromEvalInterval
	r.fieldMap["append_tags"] = r.AppendTags
	r.fieldMap["create_at"] = r.CreateAt
	r.fieldMap["create_by"] = r.CreateBy
	r.fieldMap["update_at"] = r.UpdateAt
	r.fieldMap["update_by"] = r.UpdateBy
}

func (r recordingRule) clone(db *gorm.DB) recordingRule {
	r.recordingRuleDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r recordingRule) replaceDB(db *gorm.DB) recordingRule {
	r.recordingRuleDo.ReplaceDB(db)
	return r
}

type recordingRuleDo struct{ gen.DO }

type IRecordingRuleDo interface {
	gen.SubQuery
	Debug() IRecordingRuleDo
	WithContext(ctx context.Context) IRecordingRuleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRecordingRuleDo
	WriteDB() IRecordingRuleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRecordingRuleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRecordingRuleDo
	Not(conds ...gen.Condition) IRecordingRuleDo
	Or(conds ...gen.Condition) IRecordingRuleDo
	Select(conds ...field.Expr) IRecordingRuleDo
	Where(conds ...gen.Condition) IRecordingRuleDo
	Order(conds ...field.Expr) IRecordingRuleDo
	Distinct(cols ...field.Expr) IRecordingRuleDo
	Omit(cols ...field.Expr) IRecordingRuleDo
	Join(table schema.Tabler, on ...field.Expr) IRecordingRuleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRecordingRuleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRecordingRuleDo
	Group(cols ...field.Expr) IRecordingRuleDo
	Having(conds ...gen.Condition) IRecordingRuleDo
	Limit(limit int) IRecordingRuleDo
	Offset(offset int) IRecordingRuleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRecordingRuleDo
	Unscoped() IRecordingRuleDo
	Create(values ...*model.RecordingRule) error
	CreateInBatches(values []*model.RecordingRule, batchSize int) error
	Save(values ...*model.RecordingRule) error
	First() (*model.RecordingRule, error)
	Take() (*model.RecordingRule, error)
	Last() (*model.RecordingRule, error)
	Find() ([]*model.RecordingRule, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RecordingRule, err error)
	FindInBatches(result *[]*model.RecordingRule, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RecordingRule) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRecordingRuleDo
	Assign(attrs ...field.AssignExpr) IRecordingRuleDo
	Joins(fields ...field.RelationField) IRecordingRuleDo
	Preload(fields ...field.RelationField) IRecordingRuleDo
	FirstOrInit() (*model.RecordingRule, error)
	FirstOrCreate() (*model.RecordingRule, error)
	FindByPage(offset int, limit int) (result []*model.RecordingRule, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRecordingRuleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r recordingRuleDo) Debug() IRecordingRuleDo {
	return r.withDO(r.DO.Debug())
}

func (r recordingRuleDo) WithContext(ctx context.Context) IRecordingRuleDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r recordingRuleDo) ReadDB() IRecordingRuleDo {
	return r.Clauses(dbresolver.Read)
}

func (r recordingRuleDo) WriteDB() IRecordingRuleDo {
	return r.Clauses(dbresolver.Write)
}

func (r recordingRuleDo) Session(config *gorm.Session) IRecordingRuleDo {
	return r.withDO(r.DO.Session(config))
}

func (r recordingRuleDo) Clauses(conds ...clause.Expression) IRecordingRuleDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r recordingRuleDo) Returning(value interface{}, columns ...string) IRecordingRuleDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r recordingRuleDo) Not(conds ...gen.Condition) IRecordingRuleDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r recordingRuleDo) Or(conds ...gen.Condition) IRecordingRuleDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r recordingRuleDo) Select(conds ...field.Expr) IRecordingRuleDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r recordingRuleDo) Where(conds ...gen.Condition) IRecordingRuleDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r recordingRuleDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IRecordingRuleDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r recordingRuleDo) Order(conds ...field.Expr) IRecordingRuleDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r recordingRuleDo) Distinct(cols ...field.Expr) IRecordingRuleDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r recordingRuleDo) Omit(cols ...field.Expr) IRecordingRuleDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r recordingRuleDo) Join(table schema.Tabler, on ...field.Expr) IRecordingRuleDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r recordingRuleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRecordingRuleDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r recordingRuleDo) RightJoin(table schema.Tabler, on ...field.Expr) IRecordingRuleDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r recordingRuleDo) Group(cols ...field.Expr) IRecordingRuleDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r recordingRuleDo) Having(conds ...gen.Condition) IRecordingRuleDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r recordingRuleDo) Limit(limit int) IRecordingRuleDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r recordingRuleDo) Offset(offset int) IRecordingRuleDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r recordingRuleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRecordingRuleDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r recordingRuleDo) Unscoped() IRecordingRuleDo {
	return r.withDO(r.DO.Unscoped())
}

func (r recordingRuleDo) Create(values ...*model.RecordingRule) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r recordingRuleDo) CreateInBatches(values []*model.RecordingRule, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r recordingRuleDo) Save(values ...*model.RecordingRule) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r recordingRuleDo) First() (*model.RecordingRule, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecordingRule), nil
	}
}

func (r recordingRuleDo) Take() (*model.RecordingRule, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecordingRule), nil
	}
}

func (r recordingRuleDo) Last() (*model.RecordingRule, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecordingRule), nil
	}
}

func (r recordingRuleDo) Find() ([]*model.RecordingRule, error) {
	result, err := r.DO.Find()
	return result.([]*model.RecordingRule), err
}

func (r recordingRuleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RecordingRule, err error) {
	buf := make([]*model.RecordingRule, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r recordingRuleDo) FindInBatches(result *[]*model.RecordingRule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r recordingRuleDo) Attrs(attrs ...field.AssignExpr) IRecordingRuleDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r recordingRuleDo) Assign(attrs ...field.AssignExpr) IRecordingRuleDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r recordingRuleDo) Joins(fields ...field.RelationField) IRecordingRuleDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r recordingRuleDo) Preload(fields ...field.RelationField) IRecordingRuleDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r recordingRuleDo) FirstOrInit() (*model.RecordingRule, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecordingRule), nil
	}
}

func (r recordingRuleDo) FirstOrCreate() (*model.RecordingRule, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecordingRule), nil
	}
}

func (r recordingRuleDo) FindByPage(offset int, limit int) (result []*model.RecordingRule, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r recordingRuleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r recordingRuleDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r recordingRuleDo) Delete(models ...*model.RecordingRule) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *recordingRuleDo) withDO(do gen.Dao) *recordingRuleDo {
	r.DO = *do.(*gen.DO)
	return r
}
