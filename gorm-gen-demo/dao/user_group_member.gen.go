// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm-gen-demo/model"
)

func newUserGroupMember(db *gorm.DB, opts ...gen.DOOption) userGroupMember {
	_userGroupMember := userGroupMember{}

	_userGroupMember.userGroupMemberDo.UseDB(db, opts...)
	_userGroupMember.userGroupMemberDo.UseModel(&model.UserGroupMember{})

	tableName := _userGroupMember.userGroupMemberDo.TableName()
	_userGroupMember.ALL = field.NewAsterisk(tableName)
	_userGroupMember.ID = field.NewInt64(tableName, "id")
	_userGroupMember.GroupID = field.NewInt64(tableName, "group_id")
	_userGroupMember.UserID = field.NewInt64(tableName, "user_id")

	_userGroupMember.fillFieldMap()

	return _userGroupMember
}

type userGroupMember struct {
	userGroupMemberDo

	ALL     field.Asterisk
	ID      field.Int64
	GroupID field.Int64
	UserID  field.Int64

	fieldMap map[string]field.Expr
}

func (u userGroupMember) Table(newTableName string) *userGroupMember {
	u.userGroupMemberDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userGroupMember) As(alias string) *userGroupMember {
	u.userGroupMemberDo.DO = *(u.userGroupMemberDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userGroupMember) updateTableName(table string) *userGroupMember {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.GroupID = field.NewInt64(table, "group_id")
	u.UserID = field.NewInt64(table, "user_id")

	u.fillFieldMap()

	return u
}

func (u *userGroupMember) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userGroupMember) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 3)
	u.fieldMap["id"] = u.ID
	u.fieldMap["group_id"] = u.GroupID
	u.fieldMap["user_id"] = u.UserID
}

func (u userGroupMember) clone(db *gorm.DB) userGroupMember {
	u.userGroupMemberDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userGroupMember) replaceDB(db *gorm.DB) userGroupMember {
	u.userGroupMemberDo.ReplaceDB(db)
	return u
}

type userGroupMemberDo struct{ gen.DO }

type IUserGroupMemberDo interface {
	gen.SubQuery
	Debug() IUserGroupMemberDo
	WithContext(ctx context.Context) IUserGroupMemberDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserGroupMemberDo
	WriteDB() IUserGroupMemberDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserGroupMemberDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserGroupMemberDo
	Not(conds ...gen.Condition) IUserGroupMemberDo
	Or(conds ...gen.Condition) IUserGroupMemberDo
	Select(conds ...field.Expr) IUserGroupMemberDo
	Where(conds ...gen.Condition) IUserGroupMemberDo
	Order(conds ...field.Expr) IUserGroupMemberDo
	Distinct(cols ...field.Expr) IUserGroupMemberDo
	Omit(cols ...field.Expr) IUserGroupMemberDo
	Join(table schema.Tabler, on ...field.Expr) IUserGroupMemberDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserGroupMemberDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserGroupMemberDo
	Group(cols ...field.Expr) IUserGroupMemberDo
	Having(conds ...gen.Condition) IUserGroupMemberDo
	Limit(limit int) IUserGroupMemberDo
	Offset(offset int) IUserGroupMemberDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserGroupMemberDo
	Unscoped() IUserGroupMemberDo
	Create(values ...*model.UserGroupMember) error
	CreateInBatches(values []*model.UserGroupMember, batchSize int) error
	Save(values ...*model.UserGroupMember) error
	First() (*model.UserGroupMember, error)
	Take() (*model.UserGroupMember, error)
	Last() (*model.UserGroupMember, error)
	Find() ([]*model.UserGroupMember, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserGroupMember, err error)
	FindInBatches(result *[]*model.UserGroupMember, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserGroupMember) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserGroupMemberDo
	Assign(attrs ...field.AssignExpr) IUserGroupMemberDo
	Joins(fields ...field.RelationField) IUserGroupMemberDo
	Preload(fields ...field.RelationField) IUserGroupMemberDo
	FirstOrInit() (*model.UserGroupMember, error)
	FirstOrCreate() (*model.UserGroupMember, error)
	FindByPage(offset int, limit int) (result []*model.UserGroupMember, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserGroupMemberDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userGroupMemberDo) Debug() IUserGroupMemberDo {
	return u.withDO(u.DO.Debug())
}

func (u userGroupMemberDo) WithContext(ctx context.Context) IUserGroupMemberDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userGroupMemberDo) ReadDB() IUserGroupMemberDo {
	return u.Clauses(dbresolver.Read)
}

func (u userGroupMemberDo) WriteDB() IUserGroupMemberDo {
	return u.Clauses(dbresolver.Write)
}

func (u userGroupMemberDo) Session(config *gorm.Session) IUserGroupMemberDo {
	return u.withDO(u.DO.Session(config))
}

func (u userGroupMemberDo) Clauses(conds ...clause.Expression) IUserGroupMemberDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userGroupMemberDo) Returning(value interface{}, columns ...string) IUserGroupMemberDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userGroupMemberDo) Not(conds ...gen.Condition) IUserGroupMemberDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userGroupMemberDo) Or(conds ...gen.Condition) IUserGroupMemberDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userGroupMemberDo) Select(conds ...field.Expr) IUserGroupMemberDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userGroupMemberDo) Where(conds ...gen.Condition) IUserGroupMemberDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userGroupMemberDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUserGroupMemberDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userGroupMemberDo) Order(conds ...field.Expr) IUserGroupMemberDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userGroupMemberDo) Distinct(cols ...field.Expr) IUserGroupMemberDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userGroupMemberDo) Omit(cols ...field.Expr) IUserGroupMemberDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userGroupMemberDo) Join(table schema.Tabler, on ...field.Expr) IUserGroupMemberDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userGroupMemberDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserGroupMemberDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userGroupMemberDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserGroupMemberDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userGroupMemberDo) Group(cols ...field.Expr) IUserGroupMemberDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userGroupMemberDo) Having(conds ...gen.Condition) IUserGroupMemberDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userGroupMemberDo) Limit(limit int) IUserGroupMemberDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userGroupMemberDo) Offset(offset int) IUserGroupMemberDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userGroupMemberDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserGroupMemberDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userGroupMemberDo) Unscoped() IUserGroupMemberDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userGroupMemberDo) Create(values ...*model.UserGroupMember) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userGroupMemberDo) CreateInBatches(values []*model.UserGroupMember, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userGroupMemberDo) Save(values ...*model.UserGroupMember) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userGroupMemberDo) First() (*model.UserGroupMember, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGroupMember), nil
	}
}

func (u userGroupMemberDo) Take() (*model.UserGroupMember, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGroupMember), nil
	}
}

func (u userGroupMemberDo) Last() (*model.UserGroupMember, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGroupMember), nil
	}
}

func (u userGroupMemberDo) Find() ([]*model.UserGroupMember, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserGroupMember), err
}

func (u userGroupMemberDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserGroupMember, err error) {
	buf := make([]*model.UserGroupMember, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userGroupMemberDo) FindInBatches(result *[]*model.UserGroupMember, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userGroupMemberDo) Attrs(attrs ...field.AssignExpr) IUserGroupMemberDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userGroupMemberDo) Assign(attrs ...field.AssignExpr) IUserGroupMemberDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userGroupMemberDo) Joins(fields ...field.RelationField) IUserGroupMemberDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userGroupMemberDo) Preload(fields ...field.RelationField) IUserGroupMemberDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userGroupMemberDo) FirstOrInit() (*model.UserGroupMember, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGroupMember), nil
	}
}

func (u userGroupMemberDo) FirstOrCreate() (*model.UserGroupMember, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGroupMember), nil
	}
}

func (u userGroupMemberDo) FindByPage(offset int, limit int) (result []*model.UserGroupMember, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userGroupMemberDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userGroupMemberDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userGroupMemberDo) Delete(models ...*model.UserGroupMember) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userGroupMemberDo) withDO(do gen.Dao) *userGroupMemberDo {
	u.DO = *do.(*gen.DO)
	return u
}
