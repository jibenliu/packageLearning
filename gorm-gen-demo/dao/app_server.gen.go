// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm-gen-demo/model"
)

func newAppServer(db *gorm.DB, opts ...gen.DOOption) appServer {
	_appServer := appServer{}

	_appServer.appServerDo.UseDB(db, opts...)
	_appServer.appServerDo.UseModel(&model.AppServer{})

	tableName := _appServer.appServerDo.TableName()
	_appServer.ALL = field.NewAsterisk(tableName)
	_appServer.ID = field.NewInt64(tableName, "id")
	_appServer.Name = field.NewString(tableName, "name")
	_appServer.IP = field.NewString(tableName, "ip")
	_appServer.InternalIP = field.NewString(tableName, "internal_ip")
	_appServer.OsVersion = field.NewString(tableName, "os_version")
	_appServer.CPUCnt = field.NewInt64(tableName, "cpu_cnt")
	_appServer.Memory = field.NewString(tableName, "memory")
	_appServer.Disk = field.NewString(tableName, "disk")
	_appServer.Description = field.NewString(tableName, "description")
	_appServer.CreateAt = field.NewInt64(tableName, "create_at")
	_appServer.CreateBy = field.NewString(tableName, "create_by")
	_appServer.UpdateAt = field.NewInt64(tableName, "update_at")
	_appServer.UpdateBy = field.NewString(tableName, "update_by")

	_appServer.fillFieldMap()

	return _appServer
}

type appServer struct {
	appServerDo

	ALL         field.Asterisk
	ID          field.Int64  // 主键
	Name        field.String // 主机名称
	IP          field.String // 主机域名或者IP
	InternalIP  field.String // 内网地址
	OsVersion   field.String // 操作系统版本
	CPUCnt      field.Int64  // cpu 核数
	Memory      field.String // 内存容量
	Disk        field.String // 硬盘容量
	Description field.String // 主机说明,记录 cpu 内存 硬盘 网络的购买信息
	CreateAt    field.Int64  // 创建时间
	CreateBy    field.String
	UpdateAt    field.Int64 // 更新时间
	UpdateBy    field.String

	fieldMap map[string]field.Expr
}

func (a appServer) Table(newTableName string) *appServer {
	a.appServerDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a appServer) As(alias string) *appServer {
	a.appServerDo.DO = *(a.appServerDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *appServer) updateTableName(table string) *appServer {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Name = field.NewString(table, "name")
	a.IP = field.NewString(table, "ip")
	a.InternalIP = field.NewString(table, "internal_ip")
	a.OsVersion = field.NewString(table, "os_version")
	a.CPUCnt = field.NewInt64(table, "cpu_cnt")
	a.Memory = field.NewString(table, "memory")
	a.Disk = field.NewString(table, "disk")
	a.Description = field.NewString(table, "description")
	a.CreateAt = field.NewInt64(table, "create_at")
	a.CreateBy = field.NewString(table, "create_by")
	a.UpdateAt = field.NewInt64(table, "update_at")
	a.UpdateBy = field.NewString(table, "update_by")

	a.fillFieldMap()

	return a
}

func (a *appServer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *appServer) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 13)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
	a.fieldMap["ip"] = a.IP
	a.fieldMap["internal_ip"] = a.InternalIP
	a.fieldMap["os_version"] = a.OsVersion
	a.fieldMap["cpu_cnt"] = a.CPUCnt
	a.fieldMap["memory"] = a.Memory
	a.fieldMap["disk"] = a.Disk
	a.fieldMap["description"] = a.Description
	a.fieldMap["create_at"] = a.CreateAt
	a.fieldMap["create_by"] = a.CreateBy
	a.fieldMap["update_at"] = a.UpdateAt
	a.fieldMap["update_by"] = a.UpdateBy
}

func (a appServer) clone(db *gorm.DB) appServer {
	a.appServerDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a appServer) replaceDB(db *gorm.DB) appServer {
	a.appServerDo.ReplaceDB(db)
	return a
}

type appServerDo struct{ gen.DO }

type IAppServerDo interface {
	gen.SubQuery
	Debug() IAppServerDo
	WithContext(ctx context.Context) IAppServerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAppServerDo
	WriteDB() IAppServerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAppServerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAppServerDo
	Not(conds ...gen.Condition) IAppServerDo
	Or(conds ...gen.Condition) IAppServerDo
	Select(conds ...field.Expr) IAppServerDo
	Where(conds ...gen.Condition) IAppServerDo
	Order(conds ...field.Expr) IAppServerDo
	Distinct(cols ...field.Expr) IAppServerDo
	Omit(cols ...field.Expr) IAppServerDo
	Join(table schema.Tabler, on ...field.Expr) IAppServerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAppServerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAppServerDo
	Group(cols ...field.Expr) IAppServerDo
	Having(conds ...gen.Condition) IAppServerDo
	Limit(limit int) IAppServerDo
	Offset(offset int) IAppServerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAppServerDo
	Unscoped() IAppServerDo
	Create(values ...*model.AppServer) error
	CreateInBatches(values []*model.AppServer, batchSize int) error
	Save(values ...*model.AppServer) error
	First() (*model.AppServer, error)
	Take() (*model.AppServer, error)
	Last() (*model.AppServer, error)
	Find() ([]*model.AppServer, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AppServer, err error)
	FindInBatches(result *[]*model.AppServer, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AppServer) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAppServerDo
	Assign(attrs ...field.AssignExpr) IAppServerDo
	Joins(fields ...field.RelationField) IAppServerDo
	Preload(fields ...field.RelationField) IAppServerDo
	FirstOrInit() (*model.AppServer, error)
	FirstOrCreate() (*model.AppServer, error)
	FindByPage(offset int, limit int) (result []*model.AppServer, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAppServerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a appServerDo) Debug() IAppServerDo {
	return a.withDO(a.DO.Debug())
}

func (a appServerDo) WithContext(ctx context.Context) IAppServerDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a appServerDo) ReadDB() IAppServerDo {
	return a.Clauses(dbresolver.Read)
}

func (a appServerDo) WriteDB() IAppServerDo {
	return a.Clauses(dbresolver.Write)
}

func (a appServerDo) Session(config *gorm.Session) IAppServerDo {
	return a.withDO(a.DO.Session(config))
}

func (a appServerDo) Clauses(conds ...clause.Expression) IAppServerDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a appServerDo) Returning(value interface{}, columns ...string) IAppServerDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a appServerDo) Not(conds ...gen.Condition) IAppServerDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a appServerDo) Or(conds ...gen.Condition) IAppServerDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a appServerDo) Select(conds ...field.Expr) IAppServerDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a appServerDo) Where(conds ...gen.Condition) IAppServerDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a appServerDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAppServerDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a appServerDo) Order(conds ...field.Expr) IAppServerDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a appServerDo) Distinct(cols ...field.Expr) IAppServerDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a appServerDo) Omit(cols ...field.Expr) IAppServerDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a appServerDo) Join(table schema.Tabler, on ...field.Expr) IAppServerDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a appServerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAppServerDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a appServerDo) RightJoin(table schema.Tabler, on ...field.Expr) IAppServerDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a appServerDo) Group(cols ...field.Expr) IAppServerDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a appServerDo) Having(conds ...gen.Condition) IAppServerDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a appServerDo) Limit(limit int) IAppServerDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a appServerDo) Offset(offset int) IAppServerDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a appServerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAppServerDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a appServerDo) Unscoped() IAppServerDo {
	return a.withDO(a.DO.Unscoped())
}

func (a appServerDo) Create(values ...*model.AppServer) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a appServerDo) CreateInBatches(values []*model.AppServer, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a appServerDo) Save(values ...*model.AppServer) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a appServerDo) First() (*model.AppServer, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppServer), nil
	}
}

func (a appServerDo) Take() (*model.AppServer, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppServer), nil
	}
}

func (a appServerDo) Last() (*model.AppServer, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppServer), nil
	}
}

func (a appServerDo) Find() ([]*model.AppServer, error) {
	result, err := a.DO.Find()
	return result.([]*model.AppServer), err
}

func (a appServerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AppServer, err error) {
	buf := make([]*model.AppServer, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a appServerDo) FindInBatches(result *[]*model.AppServer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a appServerDo) Attrs(attrs ...field.AssignExpr) IAppServerDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a appServerDo) Assign(attrs ...field.AssignExpr) IAppServerDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a appServerDo) Joins(fields ...field.RelationField) IAppServerDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a appServerDo) Preload(fields ...field.RelationField) IAppServerDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a appServerDo) FirstOrInit() (*model.AppServer, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppServer), nil
	}
}

func (a appServerDo) FirstOrCreate() (*model.AppServer, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppServer), nil
	}
}

func (a appServerDo) FindByPage(offset int, limit int) (result []*model.AppServer, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a appServerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a appServerDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a appServerDo) Delete(models ...*model.AppServer) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *appServerDo) withDO(do gen.Dao) *appServerDo {
	a.DO = *do.(*gen.DO)
	return a
}
