// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm-gen-demo/model"
)

func newAlertMute(db *gorm.DB, opts ...gen.DOOption) alertMute {
	_alertMute := alertMute{}

	_alertMute.alertMuteDo.UseDB(db, opts...)
	_alertMute.alertMuteDo.UseModel(&model.AlertMute{})

	tableName := _alertMute.alertMuteDo.TableName()
	_alertMute.ALL = field.NewAsterisk(tableName)
	_alertMute.ID = field.NewInt64(tableName, "id")
	_alertMute.GroupID = field.NewInt64(tableName, "group_id")
	_alertMute.Prod = field.NewString(tableName, "prod")
	_alertMute.Note = field.NewString(tableName, "note")
	_alertMute.Cate = field.NewString(tableName, "cate")
	_alertMute.Cluster = field.NewString(tableName, "cluster")
	_alertMute.DatasourceIds = field.NewString(tableName, "datasource_ids")
	_alertMute.Tags = field.NewString(tableName, "tags")
	_alertMute.Cause = field.NewString(tableName, "cause")
	_alertMute.Btime = field.NewInt64(tableName, "btime")
	_alertMute.Etime = field.NewInt64(tableName, "etime")
	_alertMute.Disabled = field.NewInt64(tableName, "disabled")
	_alertMute.MuteTimeType = field.NewInt64(tableName, "mute_time_type")
	_alertMute.PeriodicMutes = field.NewString(tableName, "periodic_mutes")
	_alertMute.CreateAt = field.NewInt64(tableName, "create_at")
	_alertMute.CreateBy = field.NewString(tableName, "create_by")
	_alertMute.UpdateAt = field.NewInt64(tableName, "update_at")
	_alertMute.UpdateBy = field.NewString(tableName, "update_by")

	_alertMute.fillFieldMap()

	return _alertMute
}

type alertMute struct {
	alertMuteDo

	ALL           field.Asterisk
	ID            field.Int64
	GroupID       field.Int64 // busi group id
	Prod          field.String
	Note          field.String
	Cate          field.String
	Cluster       field.String
	DatasourceIds field.String // datasource ids
	Tags          field.String // json,map,tagkey->regexp|value
	Cause         field.String
	Btime         field.Int64 // begin time
	Etime         field.Int64 // end time
	Disabled      field.Int64 // 0:enabled 1:disabled
	MuteTimeType  field.Int64
	PeriodicMutes field.String
	CreateAt      field.Int64
	CreateBy      field.String
	UpdateAt      field.Int64
	UpdateBy      field.String

	fieldMap map[string]field.Expr
}

func (a alertMute) Table(newTableName string) *alertMute {
	a.alertMuteDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a alertMute) As(alias string) *alertMute {
	a.alertMuteDo.DO = *(a.alertMuteDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *alertMute) updateTableName(table string) *alertMute {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.GroupID = field.NewInt64(table, "group_id")
	a.Prod = field.NewString(table, "prod")
	a.Note = field.NewString(table, "note")
	a.Cate = field.NewString(table, "cate")
	a.Cluster = field.NewString(table, "cluster")
	a.DatasourceIds = field.NewString(table, "datasource_ids")
	a.Tags = field.NewString(table, "tags")
	a.Cause = field.NewString(table, "cause")
	a.Btime = field.NewInt64(table, "btime")
	a.Etime = field.NewInt64(table, "etime")
	a.Disabled = field.NewInt64(table, "disabled")
	a.MuteTimeType = field.NewInt64(table, "mute_time_type")
	a.PeriodicMutes = field.NewString(table, "periodic_mutes")
	a.CreateAt = field.NewInt64(table, "create_at")
	a.CreateBy = field.NewString(table, "create_by")
	a.UpdateAt = field.NewInt64(table, "update_at")
	a.UpdateBy = field.NewString(table, "update_by")

	a.fillFieldMap()

	return a
}

func (a *alertMute) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *alertMute) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 18)
	a.fieldMap["id"] = a.ID
	a.fieldMap["group_id"] = a.GroupID
	a.fieldMap["prod"] = a.Prod
	a.fieldMap["note"] = a.Note
	a.fieldMap["cate"] = a.Cate
	a.fieldMap["cluster"] = a.Cluster
	a.fieldMap["datasource_ids"] = a.DatasourceIds
	a.fieldMap["tags"] = a.Tags
	a.fieldMap["cause"] = a.Cause
	a.fieldMap["btime"] = a.Btime
	a.fieldMap["etime"] = a.Etime
	a.fieldMap["disabled"] = a.Disabled
	a.fieldMap["mute_time_type"] = a.MuteTimeType
	a.fieldMap["periodic_mutes"] = a.PeriodicMutes
	a.fieldMap["create_at"] = a.CreateAt
	a.fieldMap["create_by"] = a.CreateBy
	a.fieldMap["update_at"] = a.UpdateAt
	a.fieldMap["update_by"] = a.UpdateBy
}

func (a alertMute) clone(db *gorm.DB) alertMute {
	a.alertMuteDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a alertMute) replaceDB(db *gorm.DB) alertMute {
	a.alertMuteDo.ReplaceDB(db)
	return a
}

type alertMuteDo struct{ gen.DO }

type IAlertMuteDo interface {
	gen.SubQuery
	Debug() IAlertMuteDo
	WithContext(ctx context.Context) IAlertMuteDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAlertMuteDo
	WriteDB() IAlertMuteDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAlertMuteDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAlertMuteDo
	Not(conds ...gen.Condition) IAlertMuteDo
	Or(conds ...gen.Condition) IAlertMuteDo
	Select(conds ...field.Expr) IAlertMuteDo
	Where(conds ...gen.Condition) IAlertMuteDo
	Order(conds ...field.Expr) IAlertMuteDo
	Distinct(cols ...field.Expr) IAlertMuteDo
	Omit(cols ...field.Expr) IAlertMuteDo
	Join(table schema.Tabler, on ...field.Expr) IAlertMuteDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAlertMuteDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAlertMuteDo
	Group(cols ...field.Expr) IAlertMuteDo
	Having(conds ...gen.Condition) IAlertMuteDo
	Limit(limit int) IAlertMuteDo
	Offset(offset int) IAlertMuteDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAlertMuteDo
	Unscoped() IAlertMuteDo
	Create(values ...*model.AlertMute) error
	CreateInBatches(values []*model.AlertMute, batchSize int) error
	Save(values ...*model.AlertMute) error
	First() (*model.AlertMute, error)
	Take() (*model.AlertMute, error)
	Last() (*model.AlertMute, error)
	Find() ([]*model.AlertMute, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AlertMute, err error)
	FindInBatches(result *[]*model.AlertMute, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AlertMute) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAlertMuteDo
	Assign(attrs ...field.AssignExpr) IAlertMuteDo
	Joins(fields ...field.RelationField) IAlertMuteDo
	Preload(fields ...field.RelationField) IAlertMuteDo
	FirstOrInit() (*model.AlertMute, error)
	FirstOrCreate() (*model.AlertMute, error)
	FindByPage(offset int, limit int) (result []*model.AlertMute, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAlertMuteDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a alertMuteDo) Debug() IAlertMuteDo {
	return a.withDO(a.DO.Debug())
}

func (a alertMuteDo) WithContext(ctx context.Context) IAlertMuteDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a alertMuteDo) ReadDB() IAlertMuteDo {
	return a.Clauses(dbresolver.Read)
}

func (a alertMuteDo) WriteDB() IAlertMuteDo {
	return a.Clauses(dbresolver.Write)
}

func (a alertMuteDo) Session(config *gorm.Session) IAlertMuteDo {
	return a.withDO(a.DO.Session(config))
}

func (a alertMuteDo) Clauses(conds ...clause.Expression) IAlertMuteDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a alertMuteDo) Returning(value interface{}, columns ...string) IAlertMuteDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a alertMuteDo) Not(conds ...gen.Condition) IAlertMuteDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a alertMuteDo) Or(conds ...gen.Condition) IAlertMuteDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a alertMuteDo) Select(conds ...field.Expr) IAlertMuteDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a alertMuteDo) Where(conds ...gen.Condition) IAlertMuteDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a alertMuteDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAlertMuteDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a alertMuteDo) Order(conds ...field.Expr) IAlertMuteDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a alertMuteDo) Distinct(cols ...field.Expr) IAlertMuteDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a alertMuteDo) Omit(cols ...field.Expr) IAlertMuteDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a alertMuteDo) Join(table schema.Tabler, on ...field.Expr) IAlertMuteDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a alertMuteDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAlertMuteDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a alertMuteDo) RightJoin(table schema.Tabler, on ...field.Expr) IAlertMuteDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a alertMuteDo) Group(cols ...field.Expr) IAlertMuteDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a alertMuteDo) Having(conds ...gen.Condition) IAlertMuteDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a alertMuteDo) Limit(limit int) IAlertMuteDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a alertMuteDo) Offset(offset int) IAlertMuteDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a alertMuteDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAlertMuteDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a alertMuteDo) Unscoped() IAlertMuteDo {
	return a.withDO(a.DO.Unscoped())
}

func (a alertMuteDo) Create(values ...*model.AlertMute) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a alertMuteDo) CreateInBatches(values []*model.AlertMute, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a alertMuteDo) Save(values ...*model.AlertMute) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a alertMuteDo) First() (*model.AlertMute, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlertMute), nil
	}
}

func (a alertMuteDo) Take() (*model.AlertMute, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlertMute), nil
	}
}

func (a alertMuteDo) Last() (*model.AlertMute, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlertMute), nil
	}
}

func (a alertMuteDo) Find() ([]*model.AlertMute, error) {
	result, err := a.DO.Find()
	return result.([]*model.AlertMute), err
}

func (a alertMuteDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AlertMute, err error) {
	buf := make([]*model.AlertMute, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a alertMuteDo) FindInBatches(result *[]*model.AlertMute, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a alertMuteDo) Attrs(attrs ...field.AssignExpr) IAlertMuteDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a alertMuteDo) Assign(attrs ...field.AssignExpr) IAlertMuteDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a alertMuteDo) Joins(fields ...field.RelationField) IAlertMuteDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a alertMuteDo) Preload(fields ...field.RelationField) IAlertMuteDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a alertMuteDo) FirstOrInit() (*model.AlertMute, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlertMute), nil
	}
}

func (a alertMuteDo) FirstOrCreate() (*model.AlertMute, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlertMute), nil
	}
}

func (a alertMuteDo) FindByPage(offset int, limit int) (result []*model.AlertMute, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a alertMuteDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a alertMuteDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a alertMuteDo) Delete(models ...*model.AlertMute) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *alertMuteDo) withDO(do gen.Dao) *alertMuteDo {
	a.DO = *do.(*gen.DO)
	return a
}
